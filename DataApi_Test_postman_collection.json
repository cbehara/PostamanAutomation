{
	"info": {
		"_postman_id": "fd2c6c4a-726a-4547-8be6-2d2e365655fc",
		"name": "DataApi_Test",
		"description": "This collection which contains IntermedaiteData and MetaData API services \n\nIntermedaiteData:\n1.POST-Subscribe The Topic\n2.GET-All Subscriptions Data\n3.GET-One Subscription Data\n4.GET-Data As per Subscription Key\n5.DELETE-Subscription By ID\n\nMetaData:\n1.GetAll_TMS_Records\n2.Get_TMS_ByLocode\n3.Get_Objects_ByLocode\n4.Get_SpecificObect_ByLocode",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "v1",
			"item": [
				{
					"name": "MetaData",
					"item": [
						{
							"name": "GET-Positive",
							"item": [
								{
									"name": "GetAll_TMS_Records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03701615-d3c5-4c24-89a7-08fef6295969",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(10000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												""
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_TMS_ByLocode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94f08e6a-b33d-4d24-93a1-31cdc5ca74d1",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"tmsUrl field is present in response\", function () { \r",
													"        pm.expect(jsonData[0].tmsUrl).is.to.equal(\"http://neuulm.crsp/cs/ocpi-2\"); \r",
													"    });\r",
													"pm.test(\"tmsName field is present in response\", function () { \r",
													"        pm.expect(jsonData[0].tmsName).is.to.equal(\"neuulm.crsp/cs/ocpi-2\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"locode field is present in response\", function () { \r",
													"        pm.expect(jsonData[0].locode).is.to.equal(\"DE-BY-NUL\"); \r",
													"    });\r",
													"    */\r",
													" //->10.json data parsing \r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"tmsUrl\", jsonData[0].tmsUrl);\r",
													"postman.setEnvironmentVariable(\"tmsName\", jsonData[0].tmsName);\r",
													"postman.setEnvironmentVariable(\"locode\", jsonData[0].locode);\r",
													"\r",
													" \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "{{Metadatalocode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Objects_ByLocode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1c1bd53-53f3-4fb2-a5b6-1d931ec4676d",
												"exec": [
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 50000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													" \r",
													"//->10.json data parsing \r",
													"/*var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"objectName\", jsonData[20].objectName);\r",
													"postman.setEnvironmentVariable(\"protocol\", jsonData[20].protocol);\r",
													"\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}",
													"type": "string"
												},
												{
													"key": "locode",
													"value": "{{Metadatalocode}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_SpecificObect_ByLocode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc55beb7-41bf-4bb3-8322-2f0247b0538f",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 50000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"/*pm.test(\"tmsName field is present in response\", function () { \r",
													"        pm.expect(jsonData.tmsName).is.to.equal(\"neuulm.crsp/cs/ocpi-2\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"locode field is present in response\", function () { \r",
													"        pm.expect(jsonData.locode).is.to.equal(\"DE-BY-NUL\"); \r",
													"    });\r",
													"    \r",
													"     \r",
													"pm.test(\"ObjectName field is present in response\", function () { \r",
													"        pm.expect(jsonData.objectName).is.to.equal(pm.environment.get(\"objectName\")); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Protocol field is present in response\", function () { \r",
													"        pm.expect(jsonData.protocol).is.to.equal(pm.environment.get(\"protocol\")); \r",
													"    });\r",
													" //->10.json data parsing \r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"objectName\", jsonData.objectName);\r",
													"postman.setEnvironmentVariable(\"protocol\", jsonData.protocol);\r",
													"console.log('objectName is ',pm.environment.get(\"objectName\"));\r",
													"console.log('protocol is ',pm.environment.get(\"protocol\"));\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType/:object",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType",
												":object"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}",
													"type": "string"
												},
												{
													"key": "locode",
													"value": "{{Metadatalocode}}",
													"type": "string"
												},
												{
													"key": "object",
													"value": "{{MetadataobjectName}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_SpecificObect_ByLocode_ByIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b9e31f5-4a5b-4389-8d67-4aba6943f1ce",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"\r",
													"\r",
													"//->2.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 100000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 2mb\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"ID\", jsonData[0].id);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType/:object/id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType",
												":object",
												"id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}",
													"type": "string"
												},
												{
													"key": "locode",
													"value": "DE-NI-WOB",
													"type": "string"
												},
												{
													"key": "object",
													"value": "EnvironmentSensor_Description",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_SpecificObect_ByLocode_ById",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1d2fead-38aa-42ad-af3a-61c37ab9acd5",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"\r",
													"\r",
													"//->2.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 100000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 2mb\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType/:object/id/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType",
												":object",
												"id",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}",
													"type": "string"
												},
												{
													"key": "locode",
													"value": "DE-NI-WOB",
													"type": "string"
												},
												{
													"key": "object",
													"value": "EnvironmentSensor_Data",
													"type": "string"
												},
												{
													"key": "id",
													"value": "weather1_0_1",
													"type": "string"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GET-Negative",
							"item": [
								{
									"name": "Get_TMS_ByLocode  with invalid locode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f18ecfa6-f460-4f0d-9d44-c3aca688a40e",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"    \r",
													"pm.test(\"Check the message in response is No TMS found for given locode\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No TMS found for given locode\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "IOT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Objects_ByLocode With Invalid Locode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f30a7c87-3e31-462e-9c66-5ea3e589a28e",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"    \r",
													"pm.test(\"Check the message in response is No objects configured for given locode\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No objects configured for given locode\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "IOT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_SpecificObect_ByLocode with Invalid Object",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a477242-05e9-49a2-b18f-ae804e801cf0",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Object type is not configured\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Object type is not configured\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType/:object",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType",
												":object"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "{{LOCODE}}"
												},
												{
													"key": "object",
													"value": "IOT"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"auth": {
						"type": "oauth2",
						"oauth2": [
							{
								"key": "accessToken",
								"value": "{{metadataToken}}",
								"type": "string"
							},
							{
								"key": "tokenType",
								"value": "bearer",
								"type": "string"
							},
							{
								"key": "addTokenTo",
								"value": "header",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "26bf5482-ad31-4f5f-a39c-a58cf60770da",
								"type": "text/javascript",
								"exec": [
									"const getTokenRequest = {",
									"  url: 'https://iam.testing.its-siemens.com/auth/realms/its/protocol/openid-connect/token',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/x-www-form-urlencoded',",
									"  body: {",
									"    mode: 'application/x-www-form-urlencoded',",
									"    raw: \"client_id=curl&grant_type=password&password=admin&scope=\\\"openid\\\",\\\"offline_access\\\",\\\"profile\\\",\\\"email\\\"&username=tdb-user\"",
									"  }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"    let jsonResponse = response.json(),",
									"        newAccessToken = jsonResponse.access_token;",
									"",
									"    console.log({ err, jsonResponse, newAccessToken })",
									"",
									"    pm.environment.set('metadataToken', newAccessToken);",
									"    pm.variables.set('metadataToken', newAccessToken);",
									"}); "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "98b04b1b-7a51-4308-b2d2-0a9dae736416",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "OnlineData",
					"item": [
						{
							"name": "Subscribe The Topic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e16b866-943d-465e-b2e3-d9b166b028e3",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,504]);\r",
											"});\r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											"\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"Length of json response data =\" +jsonData.length);\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->7.Verify the Response Size\r",
											"pm.test(\"Response size is less than 2MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
											"});\r",
											"\r",
											"//->8.Verify the Response  data \r",
											"var jsonData = pm.response.json(); \r",
											"\r",
											"pm.test(\"Response is not null\", function () { \r",
											"        pm.expect(jsonData).to.not.equal(null);\r",
											"    });\r",
											"\r",
											"\r",
											"//->9.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData)\r",
											"\r",
											"//->10.json data parsing \r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"key\", jsonData.dataEndpoint.key);\r",
											"postman.setEnvironmentVariable(\"id\", jsonData.id);\r",
											"postman.setEnvironmentVariable(\"consumerId\", jsonData.consumerId);\r",
											"postman.setEnvironmentVariable(\"category\", jsonData.category);\r",
											"postman.setEnvironmentVariable(\"OBJECT_TYPE\", jsonData.filters[0].value);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": \"{{category}}\",\r\n  \"filters\": [\r\n    {\r\n      \"type\": \"OBJECT_TYPE\",\r\n      \"value\": \"{{OBJECT_TYPE}}\"\r\n    },\r\n    {\r\n      \"type\": \"LOCODE\",\r\n      \"value\": \"{{LOCODE}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										""
									],
									"variable": [
										{
											"key": "consumerId",
											"type": "string",
											"value": "{{consumerid2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Subscriptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69e9abd1-69a7-4450-a311-e0999a50cd5c",
										"exec": [
											"",
											"//->1.Verify the status code in response body",
											"pm.test(\"Request was successful and Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											"",
											"//->2.Verify the Header is present or not ",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    ",
											"//->3.Verify the response should be successfull",
											"pm.test(\"response should be okay to process\", function () { ",
											"    pm.response.to.not.be.error; ",
											"    pm.response.to.not.have.jsonBody(\"error\"); ",
											"});",
											" ",
											"// ->4.Verify the response must be valid json body ",
											"pm.test(\"response must be valid and have a json body\", function () {",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"});",
											"",
											"//->5. Verify the Response headers ",
											"pass = true;",
											"fail = false;",
											"",
											"if (responseCode.code === 200 || responseCode.code === 201) {",
											"    tests[\"Request Succesfully Sent\"] = pass;",
											"",
											"    headers = {",
											"        \"Content-Type\": \"application/json\"",
											"    }",
											"",
											"    for (var i in headers) {",
											"        result = postman.getResponseHeader(i);",
											"        if (headers[i] === result)",
											"            tests[i + \" header value is present\"] = pass;",
											"        else",
											"            tests[i + \" header value is not present\"] = fail;",
											"",
											"    }",
											"    ",
											"}",
											"",
											"});",
											"",
											"//->6.print the json response ",
											"var jsonData = pm.response.json(); ",
											"console.log(jsonData);",
											"",
											"//->7.Verify the Response Time ",
											"pm.test(\"Response time is less than 30000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"//->7.Verify the Response Size",
											"pm.test(\"Response size is less than 2MB\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.below(2000000);",
											"});",
											"",
											"//->8.Verify the Response  data ",
											"var jsonData = pm.response.json(); ",
											"/*",
											"pm.test(\"Response is not null\", function () { ",
											"        pm.expect(jsonData).to.not.equal(null);",
											"    });",
											"",
											"pm.test(\"consumerId field is present in response\", function () { ",
											"        pm.expect(jsonData[0].consumerId).is.to.equal(\"FlowAI\"); ",
											"    });",
											"pm.test(\"category field is present in response\", function () { ",
											"        pm.expect(jsonData[0].category).is.to.equal(\"TRAFFIC\"); ",
											"    });",
											"    ",
											"pm.test(\"Filter field is present in response\", function () { ",
											"        pm.expect(jsonData[0].filters[0].type).is.to.equal(\"OBJECT_TYPE\");",
											"    });",
											"    ",
											"pm.test(\"dataEndpoint field is present in response\", function () { ",
											"        pm.expect(jsonData[0].dataEndpoint.type).is.to.equal(\"REST\");",
											"    });  ",
											"*/",
											"//->9.print the json response length",
											"var jsonData = pm.response.json(); ",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get One Subscription Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab8b3cd9-3872-4657-bf9a-d6b4bf0a44db",
										"exec": [
											"",
											"//->1.Verify the status code in response body",
											"pm.test(\"Request was successful and Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											"",
											"//->2.Verify the Header is present or not ",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    ",
											"//->3.Verify the response should be successfull",
											"pm.test(\"response should be okay to process\", function () { ",
											"    pm.response.to.not.be.error; ",
											"    pm.response.to.not.have.jsonBody(\"error\"); ",
											"});",
											" ",
											"// ->4.Verify the response must be valid json body ",
											"pm.test(\"response must be valid and have a json body\", function () {",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"});",
											"",
											"//->5. Verify the Response headers ",
											"pass = true;",
											"fail = false;",
											"",
											"if (responseCode.code === 200 || responseCode.code === 201) {",
											"    tests[\"Request Succesfully Sent\"] = pass;",
											"",
											"    headers = {",
											"        \"Content-Type\": \"application/json\"",
											"    }",
											"",
											"    for (var i in headers) {",
											"        result = postman.getResponseHeader(i);",
											"        if (headers[i] === result)",
											"            tests[i + \" header value is present\"] = pass;",
											"        else",
											"            tests[i + \" header value is not present\"] = fail;",
											"",
											"    }",
											"    ",
											"}",
											"",
											"});",
											"",
											"//->6.print the json response ",
											"var jsonData = pm.response.json(); ",
											"console.log(jsonData);",
											"",
											"//->7.Verify the Response Time ",
											"pm.test(\"Response time is less than 30000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"//->7.Verify the Response Size",
											"pm.test(\"Response size is less than 15KB\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.below(15000);",
											"});",
											"",
											"//->8.Verify the Response  data ",
											"var jsonData = pm.response.json(); ",
											"pm.test(\"Response is not null\", function () { ",
											"        pm.expect(jsonData).to.not.equal(null);",
											"    });",
											"/*",
											"pm.test(\"consumerId field is present in response\", function () { ",
											"        pm.expect(jsonData.consumerId).is.to.equal(\"FlowAI\"); ",
											"    });",
											"pm.test(\"category field is present in response\", function () { ",
											"        pm.expect(jsonData.category).is.to.equal(\"TRAFFIC\"); ",
											"    });",
											"    ",
											"pm.test(\"Filter field is present in response\", function () { ",
											"        pm.expect(jsonData.filters[0].type).is.to.equal(\"OBJECT_TYPE\");",
											"    });",
											"    ",
											"pm.test(\"dataEndpoint field is present in response\", function () { ",
											"        pm.expect(jsonData.dataEndpoint.type).is.to.equal(\"REST\");",
											"    });  ",
											"    ",
											"*/",
											"//->9.print the json response length",
											"var jsonData = pm.response.json(); ",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										":id"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										},
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get records as per the category and Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9fc1805-ab3d-4197-a961-674845846483",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
											"});\r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 2MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(5000000);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"data",
										":consumerId",
										":category",
										":key"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										},
										{
											"key": "category",
											"value": "{{category}}"
										},
										{
											"key": "key",
											"value": "{{key}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get records as per the category and Key by size",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29d69e61-02a4-49bc-b9df-187e995bf4ed",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
											"});\r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 2MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(5000000);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/data/:consumerId/:category/:key?size=3000000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"data",
										":consumerId",
										":category",
										":key"
									],
									"query": [
										{
											"key": "size",
											"value": "3000000"
										}
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										},
										{
											"key": "category",
											"value": "{{category}}"
										},
										{
											"key": "key",
											"value": "{{key}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Subscription By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89018d5a-95e4-4e26-bbc5-5c7d23567387",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Request was successful and Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     // assert that the status code is 200\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData);\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 15KB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
											"});\r",
											"\r",
											"\r",
											"//->9.print the json response length\r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										":id"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										},
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "oauth2",
						"oauth2": [
							{
								"key": "accessToken",
								"value": "{{onlinedataToken}}",
								"type": "string"
							},
							{
								"key": "tokenType",
								"value": "bearer",
								"type": "string"
							},
							{
								"key": "addTokenTo",
								"value": "header",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "df4c1c6e-c7a3-46db-9c5a-f32d207a6e36",
								"type": "text/javascript",
								"exec": [
									"const getTokenRequest = {",
									"  url: 'https://iam.testing.its-siemens.com/auth/realms/its/protocol/openid-connect/token',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/x-www-form-urlencoded',",
									"  body: {",
									"    mode: 'application/x-www-form-urlencoded',",
									"    raw: \"client_id=curl&grant_type=password&password=admin&scope=\\\"openid\\\",\\\"offline_access\\\",\\\"profile\\\",\\\"email\\\"&username=tdb-user\"",
									"  }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"    let jsonResponse = response.json(),",
									"        newAccessToken = jsonResponse.access_token;",
									"",
									"    console.log({ err, jsonResponse, newAccessToken })",
									"",
									"    pm.environment.set('onlinedataToken', newAccessToken);",
									"    pm.variables.set('onlinedataToken', newAccessToken);",
									"}); "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aaf2c119-641a-45b8-abed-f16e4de4cc17",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative Test Cases of Data-API",
					"item": [
						{
							"name": "Negative-TestCases",
							"item": [
								{
									"name": "Subscrive the topic WIth blank ConsumerID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3970eddf-0ea2-4b96-8e09-a25eb048c75d",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(1000000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "90efc2c1-df45-429b-b9ca-181765cd3b01",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe The Topic  with balnk Catagory",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d55060e-68e8-46e4-82bf-709735b93abc",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2ca63d8f-4c0f-4f0e-a43b-a00c83cb657e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \" \",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe The Topic  with balnk or invalid ObjectType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "719fdbeb-46a3-4433-8c01-38dd296e79d6",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 400\", function () { \r",
													"        pm.expect(jsonData.code).is.to.equal(\"400\"); \r",
													"    });\r",
													"pm.test(\"Check the status in response is BAD_REQUEST\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(\"BAD_REQUEST\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Object Type field is invalid or blank\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Object Type field is invalid or blank\"); \r",
													"    });\r",
													"    */\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b93eb19a-d3bb-4be6-ab0d-144fe91f3fac",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \" \"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe The Topic  with Locode field is invalid or blank",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c0ed245-2b10-4d15-867c-d8e1fe0e4a91",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "21d3dbf4-3a9f-4e17-b31f-7b37f7ecf43c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"\" \n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe The Topic  without From Time or To Time field is invalid or blank",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "799328d9-35bc-459f-8527-b1f6fb2d7efa",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ef73adee-1849-42f9-aa57-3eda41991f1a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\" \n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe The Topic  without AccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6e0f9c9-89fa-49fe-be02-90d8478b9beb",
												"exec": [
													"/*\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 401) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        \"Transfer-Encoding\" : \"chunked\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"pm.test(\"check the status code in response is 401\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(401); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
													"    });\r",
													"\r",
													"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
													"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													"*/"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eac2d91b-143c-4bbe-b1b2-3624ceb209ff",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Subscriptions  with Invalid or blank ConsumerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30b56ee7-b39e-4b68-904b-ded5a7c2c640",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "60139cd3-ca1e-482e-8228-7a2ce33cf0ac",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetOne Subscription With Bank or invalid ConsumerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa8a8797-147c-454b-b192-681516ae700a",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(404); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Not Found\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is No message available\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
													"    });\r",
													"    */\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": ""
												},
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetOne Subscription with invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35e65f14-151f-4ee7-a337-99ba82786e2c",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "id",
													"value": "2020"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetOne Subscription without AccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddfa74e9-09f6-45f4-8c5e-f7ded17e1f85",
												"exec": [
													"/*\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 401) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        \"Transfer-Encoding\" : \"chunked\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"pm.test(\"check the status code in response is 401\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(401); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
													"    });\r",
													"\r",
													"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
													"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Subscriptions Without AccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc454018-dd34-40ef-a649-848eda481692",
												"exec": [
													"/*\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 401) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        \"Transfer-Encoding\" : \"chunked\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"pm.test(\"check the status code in response is 401\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(401); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
													"    });\r",
													"\r",
													"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
													"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													"*/"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "25fb6152-a180-4130-bb80-46ce115ef803",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}",
													"description": "sGuard"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription key with InvalidCategory",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbdd1cca-ac52-4fc7-b5e7-acc2627d814a",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 400\", function () { \r",
													"        pm.expect(jsonData.code).is.to.equal(\"400\"); \r",
													"    });\r",
													"pm.test(\"Check the status in response is BAD_REQUEST\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(\"BAD_REQUEST\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Request Message is Invalid\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Request Message is Invalid\"); \r",
													"    });\r",
													"  */  \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "category",
													"value": "InvalidCategory"
												},
												{
													"key": "key",
													"value": "{{key}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription Key Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f292222-5d60-4a0f-bc83-3b43ab006047",
												"exec": [
													"/*\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 401) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        \"Transfer-Encoding\" : \"chunked\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"pm.test(\"check the status code in response is 401\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(401); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
													"    });\r",
													"\r",
													"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
													"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": ""
												},
												{
													"key": "category",
													"value": ""
												},
												{
													"key": "key",
													"value": "{{key}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription Key with Blank ConsumerID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "385c0d44-38d2-41c2-99ce-1f662479a059",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(404); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Not Found\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is No message available\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
													"    });\r",
													" */   \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": ""
												},
												{
													"key": "category",
													"value": "{{category}}"
												},
												{
													"key": "key",
													"value": "{{key}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription Key with Blank Catagory",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58d9953b-8116-4906-b019-21ac3756f962",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(404); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Not Found\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is No message available\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
													"    });\r",
													"    */\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "category",
													"value": ""
												},
												{
													"key": "key",
													"value": "{{key}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription Key with Blank key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ddbfac2-bb81-4b04-a52e-539353ca9b13",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(404); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Not Found\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is No message available\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
													"    });\r",
													"   */ \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "category",
													"value": "{{category}}"
												},
												{
													"key": "key",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription Key with Invalid key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4db2fa85-157d-4108-bbf0-7eabfc70d238",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"/*\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.code).is.to.equal(\"404\"); \r",
													"    });\r",
													"pm.test(\"Check the status in response is NOT_FOUND\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(\"NOT_FOUND\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Consumer ID: FlowAI Category: TRAFFIC Key: APIKEY2020\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Consumer ID: FlowAI Category: TRAFFIC Key: APIKEY2020\"); \r",
													"    });\r",
													"*/    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "category",
													"value": "{{category}}"
												},
												{
													"key": "key",
													"value": "APIKEY2020"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the Subscription Without AccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22e208fe-5ae5-4b29-849f-97980b08d6d0",
												"exec": [
													"/*\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 401) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        \"Transfer-Encoding\" : \"chunked\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"pm.test(\"check the status code in response is 401\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(401); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
													"    });\r",
													"\r",
													"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
													"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"*/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the Subscription with invalid ConsumerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c83d1ae-f043-4885-881e-192bff6cb705",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(404); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Not Found\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is No message available\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
													"    });\r",
													"    */\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "chakri"
												},
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the Subscription with Invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d251cf01-92fc-447d-8a69-0e3c40bbb1f0",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.code).is.to.equal(\"404\"); \r",
													"    });\r",
													"pm.test(\"Check the status in response is NOT_FOUND\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(\"NOT_FOUND\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Consumer ID: FlowAI id: 2020 not found\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Consumer ID: FlowAI id: 2020 not found\"); \r",
													"    });\r",
													"   */ \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "id",
													"value": "2020"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"auth": {
						"type": "oauth2",
						"oauth2": [
							{
								"key": "accessToken",
								"value": "{{intermediatedataToken}}",
								"type": "string"
							},
							{
								"key": "tokenType",
								"value": "bearer",
								"type": "string"
							},
							{
								"key": "addTokenTo",
								"value": "header",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f9fc10e2-9c3e-48fb-a840-92e1fef1d824",
								"type": "text/javascript",
								"exec": [
									"const getTokenRequest = {",
									"  url: 'https://iam.testing.its-siemens.com/auth/realms/its/protocol/openid-connect/token',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/x-www-form-urlencoded',",
									"  body: {",
									"    mode: 'application/x-www-form-urlencoded',",
									"    raw: \"client_id=curl&grant_type=password&password=admin&scope=\\\"openid\\\",\\\"offline_access\\\",\\\"profile\\\",\\\"email\\\"&username=tdb-user\"",
									"  }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"    let jsonResponse = response.json(),",
									"        newAccessToken = jsonResponse.access_token;",
									"",
									"    console.log({ err, jsonResponse, newAccessToken })",
									"",
									"    pm.environment.set('intermediatedataToken', newAccessToken);",
									"    pm.variables.set('intermediatedataToken', newAccessToken);",
									"}); "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "00e8015b-529d-4846-b32a-762cff01dc1f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "HistoricalData-Hive",
					"item": [
						{
							"name": "Subscribe The Topic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2695984b-e5f8-4569-b178-c83d4cdb065e",
										"exec": [
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,504]);\r",
											"});\r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present in response\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present in response\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"Length of json response data =\" +jsonData.length);\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->7.Verify the Response Size\r",
											"pm.test(\"Response size is less than 2MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
											"});\r",
											"\r",
											"//->8.Verify the Response  data \r",
											"var jsonData = pm.response.json(); \r",
											"/*\r",
											"pm.test(\"Response is not null\", function () { \r",
											"        pm.expect(jsonData).to.not.equal(null);\r",
											"    });\r",
											"\r",
											"pm.test(\"consumerId field is present in response\", function () { \r",
											"        pm.expect(jsonData.consumerId).is.to.equal(\"FlowAI\"); \r",
											"    });\r",
											"pm.test(\"category field is present in response\", function () { \r",
											"        pm.expect(jsonData.category).is.to.equal(\"TRAFFIC\"); \r",
											"    });\r",
											"    \r",
											"pm.test(\"Filter field is present in response\", function () { \r",
											"        pm.expect(jsonData.filters[0].type).is.to.equal(\"OBJECT_TYPE\");\r",
											"        pm.expect(jsonData.filters[1].type).is.to.equal(\"LOCODE\");\r",
											"    });\r",
											"    \r",
											"pm.test(\"dataEndpoint field is present in response\", function () { \r",
											"        pm.expect(jsonData.dataEndpoint.type).is.to.equal(\"REST\");\r",
											"    });  \r",
											"*/\r",
											"//->9.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData)\r",
											"\r",
											"//->10.json data parsing \r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"key\", jsonData.dataEndpoint.key);\r",
											"postman.setEnvironmentVariable(\"id\", jsonData.id);\r",
											"postman.setEnvironmentVariable(\"consumerId\", jsonData.consumerId);\r",
											"postman.setEnvironmentVariable(\"category\", jsonData.category);\r",
											"postman.setEnvironmentVariable(\"OBJECT_TYPE\", jsonData.filters[0].value);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										""
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Subscribe The Topic By Object Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c5dd2a7-562f-4716-89d1-8cdbf4240922",
										"exec": [
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,504]);\r",
											"});\r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present in response\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present in response\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"Length of json response data =\" +jsonData.length);\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->7.Verify the Response Size\r",
											"pm.test(\"Response size is less than 2MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
											"});\r",
											"\r",
											"//->8.Verify the Response  data \r",
											"var jsonData = pm.response.json(); \r",
											"/*\r",
											"pm.test(\"Response is not null\", function () { \r",
											"        pm.expect(jsonData).to.not.equal(null);\r",
											"    });\r",
											"\r",
											"pm.test(\"consumerId field is present in response\", function () { \r",
											"        pm.expect(jsonData.consumerId).is.to.equal(\"FlowAI\"); \r",
											"    });\r",
											"pm.test(\"category field is present in response\", function () { \r",
											"        pm.expect(jsonData.category).is.to.equal(\"TRAFFIC\"); \r",
											"    });\r",
											"    \r",
											"pm.test(\"Filter field is present in response\", function () { \r",
											"        pm.expect(jsonData.filters[0].type).is.to.equal(\"OBJECT_TYPE\");\r",
											"        pm.expect(jsonData.filters[1].type).is.to.equal(\"LOCODE\");\r",
											"    });\r",
											"    \r",
											"pm.test(\"dataEndpoint field is present in response\", function () { \r",
											"        pm.expect(jsonData.dataEndpoint.type).is.to.equal(\"REST\");\r",
											"    });  \r",
											"*/\r",
											"//->9.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData)\r",
											"\r",
											"//->10.json data parsing \r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"key1\", jsonData.dataEndpoint.key);\r",
											"postman.setEnvironmentVariable(\"id\", jsonData.id);\r",
											"postman.setEnvironmentVariable(\"consumerId\", jsonData.consumerId);\r",
											"postman.setEnvironmentVariable(\"category\", jsonData.category);\r",
											"postman.setEnvironmentVariable(\"OBJECT_TYPE\", jsonData.filters[0].value);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\",\n      \"subFilters\": [\n                {\n                    \"type\": \"ID\",\n                    \"value\": \"weather1_0_1\"\n                }\n            ]\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										""
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Subscriptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0158c7da-2e1b-4627-87f3-633f058559a2",
										"exec": [
											"",
											"//->1.Verify the status code in response body",
											"pm.test(\"Request was successful and Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											"",
											"//->2.Verify the Header is present or not ",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    ",
											"//->3.Verify the response should be successfull",
											"pm.test(\"response should be okay to process\", function () { ",
											"    pm.response.to.not.be.error; ",
											"    pm.response.to.not.have.jsonBody(\"error\"); ",
											"});",
											" ",
											"// ->4.Verify the response must be valid json body ",
											"pm.test(\"response must be valid and have a json body\", function () {",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"});",
											"",
											"//->5. Verify the Response headers ",
											"pass = true;",
											"fail = false;",
											"",
											"if (responseCode.code === 200 || responseCode.code === 201) {",
											"    tests[\"Request Succesfully Sent\"] = pass;",
											"",
											"    headers = {",
											"        \"Content-Type\": \"application/json\"",
											"    }",
											"",
											"    for (var i in headers) {",
											"        result = postman.getResponseHeader(i);",
											"        if (headers[i] === result)",
											"            tests[i + \" header value is present\"] = pass;",
											"        else",
											"            tests[i + \" header value is not present\"] = fail;",
											"",
											"    }",
											"    ",
											"}",
											"",
											"});",
											"",
											"//->6.print the json response ",
											"var jsonData = pm.response.json(); ",
											"console.log(jsonData);",
											"",
											"//->7.Verify the Response Time ",
											"pm.test(\"Response time is less than 30000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"//->7.Verify the Response Size",
											"pm.test(\"Response size is less than 2MB\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.below(2000000);",
											"});",
											"",
											"//->8.Verify the Response  data ",
											"var jsonData = pm.response.json(); ",
											"/*",
											"pm.test(\"Response is not null\", function () { ",
											"        pm.expect(jsonData).to.not.equal(null);",
											"    });",
											"",
											"pm.test(\"consumerId field is present in response\", function () { ",
											"        pm.expect(jsonData[0].consumerId).is.to.equal(\"FlowAI\"); ",
											"    });",
											"pm.test(\"category field is present in response\", function () { ",
											"        pm.expect(jsonData[0].category).is.to.equal(\"TRAFFIC\"); ",
											"    });",
											"    ",
											"pm.test(\"Filter field is present in response\", function () { ",
											"        pm.expect(jsonData[0].filters[0].type).is.to.equal(\"OBJECT_TYPE\");",
											"    });",
											"    ",
											"pm.test(\"dataEndpoint field is present in response\", function () { ",
											"        pm.expect(jsonData[0].dataEndpoint.type).is.to.equal(\"REST\");",
											"    });  ",
											"*/",
											"//->9.print the json response length",
											"var jsonData = pm.response.json(); ",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}",
											"description": "sGuard"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get One Subscription Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f3a8c69-bc45-439b-a92a-5cdd262cb430",
										"exec": [
											"",
											"//->1.Verify the status code in response body",
											"pm.test(\"Request was successful and Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											"",
											"//->2.Verify the Header is present or not ",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    ",
											"//->3.Verify the response should be successfull",
											"pm.test(\"response should be okay to process\", function () { ",
											"    pm.response.to.not.be.error; ",
											"    pm.response.to.not.have.jsonBody(\"error\"); ",
											"});",
											" ",
											"// ->4.Verify the response must be valid json body ",
											"pm.test(\"response must be valid and have a json body\", function () {",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"});",
											"",
											"//->5. Verify the Response headers ",
											"pass = true;",
											"fail = false;",
											"",
											"if (responseCode.code === 200 || responseCode.code === 201) {",
											"    tests[\"Request Succesfully Sent\"] = pass;",
											"",
											"    headers = {",
											"        \"Content-Type\": \"application/json\"",
											"    }",
											"",
											"    for (var i in headers) {",
											"        result = postman.getResponseHeader(i);",
											"        if (headers[i] === result)",
											"            tests[i + \" header value is present\"] = pass;",
											"        else",
											"            tests[i + \" header value is not present\"] = fail;",
											"",
											"    }",
											"    ",
											"}",
											"",
											"});",
											"",
											"//->6.print the json response ",
											"var jsonData = pm.response.json(); ",
											"console.log(jsonData);",
											"",
											"//->7.Verify the Response Time ",
											"pm.test(\"Response time is less than 30000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"//->7.Verify the Response Size",
											"pm.test(\"Response size is less than 15KB\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.below(15000);",
											"});",
											"",
											"//->8.Verify the Response  data ",
											"var jsonData = pm.response.json(); ",
											"pm.test(\"Response is not null\", function () { ",
											"        pm.expect(jsonData).to.not.equal(null);",
											"    });",
											"/*",
											"pm.test(\"consumerId field is present in response\", function () { ",
											"        pm.expect(jsonData.consumerId).is.to.equal(\"FlowAI\"); ",
											"    });",
											"pm.test(\"category field is present in response\", function () { ",
											"        pm.expect(jsonData.category).is.to.equal(\"TRAFFIC\"); ",
											"    });",
											"    ",
											"pm.test(\"Filter field is present in response\", function () { ",
											"        pm.expect(jsonData.filters[0].type).is.to.equal(\"OBJECT_TYPE\");",
											"    });",
											"    ",
											"pm.test(\"dataEndpoint field is present in response\", function () { ",
											"        pm.expect(jsonData.dataEndpoint.type).is.to.equal(\"REST\");",
											"    });  ",
											"    ",
											"*/",
											"//->9.print the json response length",
											"var jsonData = pm.response.json(); ",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										":id"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										},
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get records as per the category and Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de0bcda7-0416-4f9c-b3db-c7bd35741f76",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
											"});\r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 2MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(5000000);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"data",
										":consumerId",
										":category",
										":key"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										},
										{
											"key": "category",
											"value": "{{category}}"
										},
										{
											"key": "key",
											"value": "{{key}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get records as per the category and Key  by size",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7cfc9a48-9ba8-4865-988a-a21390a6db5c",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
											"});\r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 2MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(5000000);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/data/:consumerId/:category/:key?size=3000000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"data",
										":consumerId",
										":category",
										":key"
									],
									"query": [
										{
											"key": "size",
											"value": "3000000"
										}
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										},
										{
											"key": "category",
											"value": "{{category}}"
										},
										{
											"key": "key",
											"value": "{{key1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Subscription By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7878777f-a3e5-4d0e-81a4-04b8bc71c3ee",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Request was successful and Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     // assert that the status code is 200\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData);\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 15KB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
											"});\r",
											"\r",
											"\r",
											"//->9.print the json response length\r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										":id"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										},
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "oauth2",
						"oauth2": [
							{
								"key": "accessToken",
								"value": "{{historicaldataToken}}",
								"type": "string"
							},
							{
								"key": "tokenType",
								"value": "bearer",
								"type": "string"
							},
							{
								"key": "addTokenTo",
								"value": "header",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ccd5ee68-22d0-46f2-93ed-dd8672a7c91a",
								"type": "text/javascript",
								"exec": [
									"const getTokenRequest = {",
									"  url: 'https://iam.testing.its-siemens.com/auth/realms/its/protocol/openid-connect/token',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/x-www-form-urlencoded',",
									"  body: {",
									"    mode: 'application/x-www-form-urlencoded',",
									"    raw: \"client_id=curl&grant_type=password&password=admin&scope=\\\"openid\\\",\\\"offline_access\\\",\\\"profile\\\",\\\"email\\\"&username=tdb-user\"",
									"  }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"    let jsonResponse = response.json(),",
									"        newAccessToken = jsonResponse.access_token;",
									"",
									"    console.log({ err, jsonResponse, newAccessToken })",
									"",
									"    pm.environment.set('historicaldataToken', newAccessToken);",
									"    pm.variables.set('historicaldataToken', newAccessToken);",
									"}); "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1a052320-3662-4075-95c9-110699db1089",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Folder for v1",
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "18e4a070-f7d8-43e2-95fd-55ee332abe96",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4b32a478-732f-475e-98eb-87c243ee9bec",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}