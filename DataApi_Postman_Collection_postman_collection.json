{
	"info": {
		"_postman_id": "21b82d73-3d94-457e-a6e1-90f409d517c5",
		"name": "DataApi_Postman_Collection",
		"description": "This collection which contains IntermedaiteData and MetaData API services \n\nIntermedaiteData:\n1.POST-Subscribe The Topic\n2.GET-All Subscriptions Data\n3.GET-One Subscription Data\n4.GET-Data As per Subscription Key\n5.DELETE-Subscription By ID\n\nMetaData:\n1.GetAll_TMS_Records\n2.Get_TMS_ByLocode\n3.Get_Objects_ByLocode\n4.Get_SpecificObect_ByLocode",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "v1",
			"item": [
				{
					"name": "IntermediateData(Warm)-MongoDB-Presto",
					"item": [
						{
							"name": "Postive-TestCases",
							"item": [
								{
									"name": "Subscribe The Topic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88f47ced-41d6-436b-acd0-9dbfd79bd094",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 50000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 4MB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(4000000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"pm.test(\"Filter field is present in response\", function () { \r",
													"        pm.expect(jsonData.filters[0].type).is.to.equal(\"OBJECT_TYPE\");\r",
													"        pm.expect(jsonData.filters[1].type).is.to.equal(\"LOCODE\");\r",
													"        pm.expect(jsonData.filters[2].type).is.to.equal(\"FROM_TIME\");\r",
													"        pm.expect(jsonData.filters[3].type).is.to.equal(\"TO_TIME\");\r",
													"    });\r",
													"    \r",
													"  \r",
													"\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													"//->10.json data parsing \r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"key\", jsonData.dataEndpoint.key);\r",
													"postman.setEnvironmentVariable(\"id\", jsonData.id);\r",
													"postman.setEnvironmentVariable(\"consumerId\", jsonData.consumerId);\r",
													"postman.setEnvironmentVariable(\"category\", jsonData.category);\r",
													"postman.setEnvironmentVariable(\"OBJECT_TYPE\", jsonData.filters[0].value);\r",
													"postman.setEnvironmentVariable(\"LOCODE\", jsonData.filters[1].value);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "50beca98-187b-472e-8544-1373e9c656aa",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Subscriptions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0892cb5-1fb5-4793-b318-3f092e36edb3",
												"exec": [
													"",
													"//->1.Verify the status code in response body",
													"pm.test(\"Request was successful and Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"}); ",
													"",
													"//->2.Verify the Header is present or not ",
													"pm.test(\"Content-Type header is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    ",
													"//->3.Verify the response should be successfull",
													"pm.test(\"response should be okay to process\", function () { ",
													"    pm.response.to.not.be.error; ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													" ",
													"// ->4.Verify the response must be valid json body ",
													"pm.test(\"response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
													"     // assert that the response has a valid JSON body",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
													"});",
													"",
													"//->5. Verify the Response headers ",
													"pass = true;",
													"fail = false;",
													"",
													"if (responseCode.code === 200 || responseCode.code === 201) {",
													"    tests[\"Request Succesfully Sent\"] = pass;",
													"",
													"    headers = {",
													"        \"Content-Type\": \"application/json\"",
													"    }",
													"",
													"    for (var i in headers) {",
													"        result = postman.getResponseHeader(i);",
													"        if (headers[i] === result)",
													"            tests[i + \" header value is present\"] = pass;",
													"        else",
													"            tests[i + \" header value is not present\"] = fail;",
													"",
													"    }",
													"    ",
													"}",
													"",
													"});",
													"",
													"//->6.print the json response ",
													"var jsonData = pm.response.json(); ",
													"console.log(jsonData);",
													"",
													"//->7.Verify the Response Time ",
													"pm.test(\"Response time is less than 50000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);",
													"});",
													"//->7.Verify the Response Size",
													"pm.test(\"Response size is less than 4MB\", function () {",
													"    pm.expect(pm.response.responseSize).to.be.below(4000000);",
													"});",
													"",
													"//->8.Verify the Response  data ",
													"var jsonData = pm.response.json(); ",
													"",
													"pm.test(\"Response is not null\", function () { ",
													"        pm.expect(jsonData).to.not.equal(null);",
													"    });",
													"/*",
													"pm.test(\"consumerId field is present in response\", function () { ",
													"        pm.expect(jsonData[0].consumerId).is.to.equal(\"FlowAI\"); ",
													"    });",
													"pm.test(\"category field is present in response\", function () { ",
													"        pm.expect(jsonData[0].category).is.to.equal(\"TRAFFIC\"); ",
													"    });",
													"    ",
													"pm.test(\"dataEndpoint field is present in response\", function () { ",
													"        pm.expect(jsonData[0].dataEndpoint.type).is.to.equal(\"REST\");",
													"    });  ",
													"",
													"pm.test(\"Filter field is present in response\", function () { ",
													"        pm.expect(jsonData[0].filters[0].type).is.to.equal(\"OBJECT_TYPE\");",
													"        pm.expect(jsonData[0].filters[1].type).is.to.equal(\"LOCODE\");",
													"        pm.expect(jsonData[0].filters[2].type).is.to.equal(\"FROM_TIME\");",
													"        pm.expect(jsonData[0].filters[3].type).is.to.equal(\"TO_TIME\");",
													"    });",
													"",
													"*/",
													"//->9.print the json response length",
													"var jsonData = pm.response.json(); ",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "11a15942-d61f-4797-bae9-ed12ee51e947",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"description": "sGuard",
													"key": "consumerId",
													"value": "{{consumerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetOne Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85ecf004-d25c-4a96-9627-66a393242fef",
												"exec": [
													"",
													"//->1.Verify the status code in response body",
													"pm.test(\"Request was successful and Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"}); ",
													"",
													"//->2.Verify the Header is present or not ",
													"pm.test(\"Content-Type header is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    ",
													"//->3.Verify the response should be successfull",
													"pm.test(\"response should be okay to process\", function () { ",
													"    pm.response.to.not.be.error; ",
													"    pm.response.to.not.have.jsonBody(\"error\"); ",
													"});",
													" ",
													"// ->4.Verify the response must be valid json body ",
													"pm.test(\"response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
													"     // assert that the response has a valid JSON body",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
													"});",
													"",
													"//->5. Verify the Response headers ",
													"pass = true;",
													"fail = false;",
													"",
													"if (responseCode.code === 200 || responseCode.code === 201) {",
													"    tests[\"Request Succesfully Sent\"] = pass;",
													"",
													"    headers = {",
													"        \"Content-Type\": \"application/json\"",
													"    }",
													"",
													"    for (var i in headers) {",
													"        result = postman.getResponseHeader(i);",
													"        if (headers[i] === result)",
													"            tests[i + \" header value is present\"] = pass;",
													"        else",
													"            tests[i + \" header value is not present\"] = fail;",
													"",
													"    }",
													"    ",
													"}",
													"",
													"});",
													"",
													"//->6.print the json response ",
													"var jsonData = pm.response.json(); ",
													"console.log(jsonData);",
													"",
													"//->7.Verify the Response Time ",
													"pm.test(\"Response time is less than 50000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);",
													"});",
													"//->7.Verify the Response Size",
													"pm.test(\"Response size is less than 4MB\", function () {",
													"    pm.expect(pm.response.responseSize).to.be.below(4000000);",
													"});",
													"",
													"//->8.Verify the Response  data ",
													"var jsonData = pm.response.json(); ",
													"pm.test(\"Response is not null\", function () { ",
													"        pm.expect(jsonData).to.not.equal(null);",
													"    });",
													"",
													"//->9.print the json response length",
													"var jsonData = pm.response.json(); ",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7a9e3c4-d311-4c9d-921d-21d25bddce8a",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the status code is 200\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 50000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 4MB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(4000000);\r",
													"});\r",
													"\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"//->10.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"//->Verify the Json Schema \r",
													"\r",
													"/*var schema  ={\r",
													"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
													"    \"$id\": \"http://example.com/example.json\",\r",
													"    \"type\": \"object\",\r",
													"    \"title\": \"The Root Schema\",\r",
													"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
													"    \"required\": [\r",
													"        \"context\",\r",
													"        \"ontology\",\r",
													"        \"usage\",\r",
													"        \"access\",\r",
													"        \"coredata\"\r",
													"    ],\r",
													"    \"properties\": {\r",
													"        \"context\": {\r",
													"            \"$id\": \"#/properties/context\",\r",
													"            \"type\": \"object\",\r",
													"            \"title\": \"The Context Schema\",\r",
													"            \"description\": \"An explanation about the purpose of this instance.\",\r",
													"            \"default\": {},\r",
													"            \"examples\": [\r",
													"                {\r",
													"                    \"dataSource\": \"tdb\",\r",
													"                    \"objectId\": \"UTCaaS\",\r",
													"                    \"timestamp\": \"2020-01-31T00:25:54.045Z\",\r",
													"                    \"objectType\": \"Subsystem_Description\",\r",
													"                    \"marker\": {\r",
													"                        \"Type\": \"UTCaaS\"\r",
													"                    },\r",
													"                    \"location\": {\r",
													"                        \"locationCountry\": \"DE\",\r",
													"                        \"locationDivision\": \"BY\",\r",
													"                        \"locationCity\": \"NUL\"\r",
													"                    },\r",
													"                    \"Rel_Ids\": []\r",
													"                }\r",
													"            ],\r",
													"            \"required\": [\r",
													"                \"dataSource\",\r",
													"                \"objectId\",\r",
													"                \"objectType\",\r",
													"                \"timestamp\",\r",
													"                \"location\",\r",
													"                \"Rel_Ids\",\r",
													"                \"marker\"\r",
													"            ],\r",
													"            \"properties\": {\r",
													"                \"dataSource\": {\r",
													"                    \"$id\": \"#/properties/context/properties/dataSource\",\r",
													"                    \"type\": \"string\",\r",
													"                    \"title\": \"The Datasource Schema\",\r",
													"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                    \"default\": \"\",\r",
													"                    \"examples\": [\r",
													"                        \"tdb\"\r",
													"                    ]\r",
													"                },\r",
													"                \"objectId\": {\r",
													"                    \"$id\": \"#/properties/context/properties/objectId\",\r",
													"                    \"type\": \"string\",\r",
													"                    \"title\": \"The Objectid Schema\",\r",
													"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                    \"default\": \"\",\r",
													"                    \"examples\": [\r",
													"                        \"UTCaaS\"\r",
													"                    ]\r",
													"                },\r",
													"                \"objectType\": {\r",
													"                    \"$id\": \"#/properties/context/properties/objectType\",\r",
													"                    \"type\": \"string\",\r",
													"                    \"title\": \"The Objecttype Schema\",\r",
													"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                    \"default\": \"\",\r",
													"                    \"examples\": [\r",
													"                        \"Subsystem_Description\"\r",
													"                    ]\r",
													"                },\r",
													"                \"timestamp\": {\r",
													"                    \"$id\": \"#/properties/context/properties/timestamp\",\r",
													"                    \"type\": \"string\",\r",
													"                    \"title\": \"The Timestamp Schema\",\r",
													"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                    \"default\": \"\",\r",
													"                    \"examples\": [\r",
													"                        \"2020-01-31T00:25:54.045Z\"\r",
													"                    ]\r",
													"                },\r",
													"                \"location\": {\r",
													"                    \"$id\": \"#/properties/context/properties/location\",\r",
													"                    \"type\": \"object\",\r",
													"                    \"title\": \"The Location Schema\",\r",
													"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                    \"default\": {},\r",
													"                    \"examples\": [\r",
													"                        {\r",
													"                            \"locationCountry\": \"DE\",\r",
													"                            \"locationDivision\": \"BY\",\r",
													"                            \"locationCity\": \"NUL\"\r",
													"                        }\r",
													"                    ],\r",
													"                    \"required\": [\r",
													"                        \"locationCountry\",\r",
													"                        \"locationDivision\",\r",
													"                        \"locationCity\"\r",
													"                    ],\r",
													"                    \"properties\": {\r",
													"                        \"locationCountry\": {\r",
													"                            \"$id\": \"#/properties/context/properties/location/properties/locationCountry\",\r",
													"                            \"type\": \"string\",\r",
													"                            \"title\": \"The Locationcountry Schema\",\r",
													"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                            \"default\": \"\",\r",
													"                            \"examples\": [\r",
													"                                \"DE\"\r",
													"                            ]\r",
													"                        },\r",
													"                        \"locationDivision\": {\r",
													"                            \"$id\": \"#/properties/context/properties/location/properties/locationDivision\",\r",
													"                            \"type\": \"string\",\r",
													"                            \"title\": \"The Locationdivision Schema\",\r",
													"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                            \"default\": \"\",\r",
													"                            \"examples\": [\r",
													"                                \"BY\"\r",
													"                            ]\r",
													"                        },\r",
													"                        \"locationCity\": {\r",
													"                            \"$id\": \"#/properties/context/properties/location/properties/locationCity\",\r",
													"                            \"type\": \"string\",\r",
													"                            \"title\": \"The Locationcity Schema\",\r",
													"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                            \"default\": \"\",\r",
													"                            \"examples\": [\r",
													"                                \"NUL\"\r",
													"                            ]\r",
													"                        }\r",
													"                    }\r",
													"                },\r",
													"                \"Rel_Ids\": {\r",
													"                    \"$id\": \"#/properties/context/properties/Rel_Ids\",\r",
													"                    \"type\": \"array\",\r",
													"                    \"title\": \"The Rel_ids Schema\",\r",
													"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                    \"default\": []\r",
													"                },\r",
													"                \"marker\": {\r",
													"                    \"$id\": \"#/properties/context/properties/marker\",\r",
													"                    \"type\": \"object\",\r",
													"                    \"title\": \"The Marker Schema\",\r",
													"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                    \"default\": {},\r",
													"                    \"examples\": [\r",
													"                        {\r",
													"                            \"Type\": \"UTCaaS\"\r",
													"                        }\r",
													"                    ],\r",
													"                    \"required\": [\r",
													"                        \"Type\"\r",
													"                    ],\r",
													"                    \"properties\": {\r",
													"                        \"Type\": {\r",
													"                            \"$id\": \"#/properties/context/properties/marker/properties/Type\",\r",
													"                            \"type\": \"string\",\r",
													"                            \"title\": \"The Type Schema\",\r",
													"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                            \"default\": \"\",\r",
													"                            \"examples\": [\r",
													"                                \"UTCaaS\"\r",
													"                            ]\r",
													"                        }\r",
													"                    }\r",
													"                }\r",
													"            }\r",
													"        },\r",
													"        \"ontology\": {\r",
													"            \"$id\": \"#/properties/ontology\",\r",
													"            \"type\": \"object\",\r",
													"            \"title\": \"The Ontology Schema\",\r",
													"            \"description\": \"An explanation about the purpose of this instance.\",\r",
													"            \"default\": {},\r",
													"            \"examples\": [\r",
													"                {}\r",
													"            ]\r",
													"        },\r",
													"        \"usage\": {\r",
													"            \"$id\": \"#/properties/usage\",\r",
													"            \"type\": \"object\",\r",
													"            \"title\": \"The Usage Schema\",\r",
													"            \"description\": \"An explanation about the purpose of this instance.\",\r",
													"            \"default\": {},\r",
													"            \"examples\": [\r",
													"                {}\r",
													"            ]\r",
													"        },\r",
													"        \"access\": {\r",
													"            \"$id\": \"#/properties/access\",\r",
													"            \"type\": \"object\",\r",
													"            \"title\": \"The Access Schema\",\r",
													"            \"description\": \"An explanation about the purpose of this instance.\",\r",
													"            \"default\": {},\r",
													"            \"examples\": [\r",
													"                {}\r",
													"            ]\r",
													"        },\r",
													"        \"coredata\": {\r",
													"            \"$id\": \"#/properties/coredata\",\r",
													"            \"type\": \"object\",\r",
													"            \"title\": \"The Coredata Schema\",\r",
													"            \"description\": \"An explanation about the purpose of this instance.\",\r",
													"            \"default\": {},\r",
													"            \"examples\": [\r",
													"                {\r",
													"                    \"timestamp\": \"2020-01-31T00:25:54.045Z\",\r",
													"                    \"objectType\": \"Subsystem_Description\",\r",
													"                    \"Type\": \"UTCaaS\",\r",
													"                    \"publishing_timestamp\": \"2020-03-12T06:10:19.048Z\",\r",
													"                    \"id\": \"UTCaaS\",\r",
													"                    \"Rel_Ids\": [],\r",
													"                    \"Name\": \"UTCaaS\",\r",
													"                    \"controllerId\": \"DE-BY-NUL-UTCaaS\"\r",
													"                }\r",
													"            ],\r",
													"            \"required\": [\r",
													"                \"id\",\r",
													"                \"Name\",\r",
													"                \"Type\",\r",
													"                \"Rel_Ids\",\r",
													"                \"objectType\",\r",
													"                \"controllerId\",\r",
													"                \"timestamp\",\r",
													"                \"publishing_timestamp\"\r",
													"            ],\r",
													"            \"properties\": {\r",
													"                \"id\": {\r",
													"                    \"$id\": \"#/properties/coredata/properties/id\",\r",
													"                    \"type\": \"string\",\r",
													"                    \"title\": \"The Id Schema\",\r",
													"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                    \"default\": \"\",\r",
													"                    \"examples\": [\r",
													"                        \"UTCaaS\"\r",
													"                    ]\r",
													"                },\r",
													"                \"Name\": {\r",
													"                    \"$id\": \"#/properties/coredata/properties/Name\",\r",
													"                    \"type\": \"string\",\r",
													"                    \"title\": \"The Name Schema\",\r",
													"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                    \"default\": \"\",\r",
													"                    \"examples\": [\r",
													"                        \"UTCaaS\"\r",
													"                    ]\r",
													"                },\r",
													"                \"Type\": {\r",
													"                    \"$id\": \"#/properties/coredata/properties/Type\",\r",
													"                    \"type\": \"string\",\r",
													"                    \"title\": \"The Type Schema\",\r",
													"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                    \"default\": \"\",\r",
													"                    \"examples\": [\r",
													"                        \"UTCaaS\"\r",
													"                    ]\r",
													"                },\r",
													"                \"Rel_Ids\": {\r",
													"                    \"$id\": \"#/properties/coredata/properties/Rel_Ids\",\r",
													"                    \"type\": \"array\",\r",
													"                    \"title\": \"The Rel_ids Schema\",\r",
													"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                    \"default\": []\r",
													"                },\r",
													"                \"objectType\": {\r",
													"                    \"$id\": \"#/properties/coredata/properties/objectType\",\r",
													"                    \"type\": \"string\",\r",
													"                    \"title\": \"The Objecttype Schema\",\r",
													"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                    \"default\": \"\",\r",
													"                    \"examples\": [\r",
													"                        \"Subsystem_Description\"\r",
													"                    ]\r",
													"                },\r",
													"                \"controllerId\": {\r",
													"                    \"$id\": \"#/properties/coredata/properties/controllerId\",\r",
													"                    \"type\": \"string\",\r",
													"                    \"title\": \"The Controllerid Schema\",\r",
													"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                    \"default\": \"\",\r",
													"                    \"examples\": [\r",
													"                        \"DE-BY-NUL-UTCaaS\"\r",
													"                    ]\r",
													"                },\r",
													"                \"timestamp\": {\r",
													"                    \"$id\": \"#/properties/coredata/properties/timestamp\",\r",
													"                    \"type\": \"string\",\r",
													"                    \"title\": \"The Timestamp Schema\",\r",
													"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                    \"default\": \"\",\r",
													"                    \"examples\": [\r",
													"                        \"2020-01-31T00:25:54.045Z\"\r",
													"                    ]\r",
													"                },\r",
													"                \"publishing_timestamp\": {\r",
													"                    \"$id\": \"#/properties/coredata/properties/publishing_timestamp\",\r",
													"                    \"type\": \"string\",\r",
													"                    \"title\": \"The Publishing_timestamp Schema\",\r",
													"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
													"                    \"default\": \"\",\r",
													"                    \"examples\": [\r",
													"                        \"2020-03-12T06:10:19.048Z\"\r",
													"                    ]\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.test('Schema Validation', function() {\r",
													"    \r",
													"    var result=tv4.validateResult(pm.response.json(), schema);\r",
													" \r",
													"    if(!result.valid){\r",
													"        console.log(result);\r",
													"    }\r",
													" \r",
													"    pm.expect(result.valid).to.be.true;\r",
													"})\r",
													"*/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "category",
													"value": "{{category}}"
												},
												{
													"key": "key",
													"value": "{{key}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d1dab37-cc9d-4012-9874-d41e81603687",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the status code is 200\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 50000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 4MB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(4000000);\r",
													"});\r",
													"\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative-TestCases",
							"item": [
								{
									"name": "Subscrive the topic WIth blank ConsumerID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5bc66c30-589b-4d89-a48f-5060a080c940",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(1000000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "99be9da6-e13c-4a0d-ac21-7e6fbefd22db",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe The Topic  with balnk Catagory",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "579f9a34-2a35-4f81-8b14-30f530420ba0",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "628733fe-9e9d-4352-a967-8d2a65ee2cc0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \" \",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe The Topic  with balnk or invalid ObjectType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9740b055-0257-4f71-8475-b41fd92cdf23",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 400\", function () { \r",
													"        pm.expect(jsonData.code).is.to.equal(\"400\"); \r",
													"    });\r",
													"pm.test(\"Check the status in response is BAD_REQUEST\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(\"BAD_REQUEST\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Object Type field is invalid or blank\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Object Type field is invalid or blank\"); \r",
													"    });\r",
													"    */\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7732a69e-4124-4689-8ba2-7c97e344e042",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \" \"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe The Topic  with Locode field is invalid or blank",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3de9721-6bfd-4014-80bb-692481f827fc",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3f9667cd-1193-4b82-8dbb-79b926f6e240",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"\" \n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe The Topic  without From Time or To Time field is invalid or blank",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f486f466-dc6a-4eec-b40b-a9d021630f24",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f29bc9e4-613d-4bc7-91fb-7d2daf4ddcc9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\" \n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe The Topic  without AccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd01b7d8-6042-4d8c-9726-c3023b4c2d2c",
												"exec": [
													"/*\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 401) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        \"Transfer-Encoding\" : \"chunked\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"pm.test(\"check the status code in response is 401\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(401); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
													"    });\r",
													"\r",
													"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
													"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													"*/"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ac490d5-ee0c-4fbc-b9a8-39dae3e88467",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Subscriptions  with Invalid or blank ConsumerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cdba7e8d-cac8-4c67-85b6-046bcf84f3a0",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5f6f667b-1ae9-4333-8082-01ab638cea9e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetOne Subscription With Bank or invalid ConsumerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b8caf28-eb30-47fd-801a-f87f3c906586",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(404); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Not Found\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is No message available\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
													"    });\r",
													"    */\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": ""
												},
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetOne Subscription with invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea14fe5a-e1e8-4f91-a586-b0107eaf34f6",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "id",
													"value": "2020"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetOne Subscription without AccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b578467a-d051-4e7e-8e3a-b6e74e03941d",
												"exec": [
													"/*\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 401) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        \"Transfer-Encoding\" : \"chunked\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"pm.test(\"check the status code in response is 401\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(401); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
													"    });\r",
													"\r",
													"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
													"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Subscriptions Without AccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13fb053f-08c7-422e-a717-1e8f2bd74ff3",
												"exec": [
													"/*\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 401) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        \"Transfer-Encoding\" : \"chunked\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"pm.test(\"check the status code in response is 401\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(401); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
													"    });\r",
													"\r",
													"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
													"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													"*/"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d876e1db-57b1-454d-8905-63a61262c08c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}",
													"description": "sGuard"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription key with InvalidCategory",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6abfb5b9-bfec-4f47-afea-60e6668463a7",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 400\", function () { \r",
													"        pm.expect(jsonData.code).is.to.equal(\"400\"); \r",
													"    });\r",
													"pm.test(\"Check the status in response is BAD_REQUEST\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(\"BAD_REQUEST\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Request Message is Invalid\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Request Message is Invalid\"); \r",
													"    });\r",
													"  */  \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "category",
													"value": "InvalidCategory"
												},
												{
													"key": "key",
													"value": "{{key}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription Key Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fc625d6-3bec-489b-8690-392528121dd9",
												"exec": [
													"/*\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 401) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        \"Transfer-Encoding\" : \"chunked\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"pm.test(\"check the status code in response is 401\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(401); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
													"    });\r",
													"\r",
													"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
													"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": ""
												},
												{
													"key": "category",
													"value": ""
												},
												{
													"key": "key",
													"value": "{{key}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription Key with Blank ConsumerID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "566792b8-a9ee-49f7-8315-d851134025a5",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(404); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Not Found\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is No message available\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
													"    });\r",
													" */   \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": ""
												},
												{
													"key": "category",
													"value": "{{category}}"
												},
												{
													"key": "key",
													"value": "{{key}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription Key with Blank Catagory",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6973ff3d-5bcd-46d5-a028-0dae53e7bbb5",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(404); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Not Found\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is No message available\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
													"    });\r",
													"    */\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "category",
													"value": ""
												},
												{
													"key": "key",
													"value": "{{key}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription Key with Blank key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa268a09-f848-44c2-9682-60fcd47be760",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(404); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Not Found\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is No message available\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
													"    });\r",
													"   */ \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "category",
													"value": "{{category}}"
												},
												{
													"key": "key",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription Key with Invalid key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b76068f8-7e88-4e23-810d-4a2819a53e1e",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"/*\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.code).is.to.equal(\"404\"); \r",
													"    });\r",
													"pm.test(\"Check the status in response is NOT_FOUND\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(\"NOT_FOUND\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Consumer ID: FlowAI Category: TRAFFIC Key: APIKEY2020\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Consumer ID: FlowAI Category: TRAFFIC Key: APIKEY2020\"); \r",
													"    });\r",
													"*/    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "category",
													"value": "{{category}}"
												},
												{
													"key": "key",
													"value": "APIKEY2020"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the Subscription Without AccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bda6e4a4-5a59-4c61-8d7e-0a11400a096e",
												"exec": [
													"/*\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 401) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        \"Transfer-Encoding\" : \"chunked\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"pm.test(\"check the status code in response is 401\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(401); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
													"    });\r",
													"\r",
													"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
													"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"*/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the Subscription with invalid ConsumerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f776aae-304f-45d4-8ae5-7499536ac7e3",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(404); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Not Found\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is No message available\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
													"    });\r",
													"    */\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "chakri"
												},
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the Subscription with Invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f40452eb-4b8f-4f83-aae8-c1a0902952bd",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.code).is.to.equal(\"404\"); \r",
													"    });\r",
													"pm.test(\"Check the status in response is NOT_FOUND\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(\"NOT_FOUND\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Consumer ID: FlowAI id: 2020 not found\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Consumer ID: FlowAI id: 2020 not found\"); \r",
													"    });\r",
													"   */ \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "id",
													"value": "2020"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "MetaData",
					"item": [
						{
							"name": "Positive-TestCases",
							"item": [
								{
									"name": "Get metadata records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2992e7a-d583-44b9-8b1b-8782e207876f",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 50000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 4MB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(4000000);\r",
													"});\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												""
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetAll_TMS_Records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4ddc8cd-9bc5-4cb1-af0e-89c546d413dd",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 50000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 4MB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(4000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												""
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_TMS_ByLocode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ade82b9-a638-4b2f-a486-913d4195a28f",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 50000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 4MB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(4000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"tmsUrl field is present in response\", function () { \r",
													"        pm.expect(jsonData[0].tmsUrl).is.to.equal(\"http://neuulm.crsp/cs/ocpi-2\"); \r",
													"    });\r",
													"pm.test(\"tmsName field is present in response\", function () { \r",
													"        pm.expect(jsonData[0].tmsName).is.to.equal(\"neuulm.crsp/cs/ocpi-2\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"locode field is present in response\", function () { \r",
													"        pm.expect(jsonData[0].locode).is.to.equal(\"DE-BY-NUL\"); \r",
													"    });\r",
													"    */\r",
													" //->10.json data parsing \r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"tmsUrl\", jsonData[0].tmsUrl);\r",
													"postman.setEnvironmentVariable(\"tmsName\", jsonData[0].tmsName);\r",
													"postman.setEnvironmentVariable(\"locode\", jsonData[0].locode);\r",
													"\r",
													" \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "{{LOCODE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Objects_ByLocode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aff8f97c-0f2a-4a75-93b7-1d13b9836098",
												"exec": [
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 50000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 4MB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(4000000);\r",
													"});\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													" /*\r",
													"//->10.json data parsing \r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"objectName\", jsonData[20].objectName);\r",
													"postman.setEnvironmentVariable(\"protocol\", jsonData[20].protocol);\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "{{LOCODE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_SpecificObect_ByLocode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a641100-56e8-4db6-9175-5cd485aec45c",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 50000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 4MB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(4000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"//->10.Verify the Response  data \r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"tmsName field is present in response\", function () { \r",
													"        pm.expect(jsonData.tmsName).is.to.equal(\"neuulm.crsp/cs/ocpi-2\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"locode field is present in response\", function () { \r",
													"        pm.expect(jsonData.locode).is.to.equal(\"DE-BY-NUL\"); \r",
													"    });\r",
													"    \r",
													"     \r",
													"pm.test(\"ObjectName field is present in response\", function () { \r",
													"        pm.expect(jsonData.objectName).is.to.equal(pm.environment.get(\"objectName\")); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Protocol field is present in response\", function () { \r",
													"        pm.expect(jsonData.protocol).is.to.equal(pm.environment.get(\"protocol\")); \r",
													"    });\r",
													" //->10.json data parsing \r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"objectName\", jsonData.objectName);\r",
													"postman.setEnvironmentVariable(\"protocol\", jsonData.protocol);\r",
													"console.log('objectName is ',pm.environment.get(\"objectName\"));\r",
													"console.log('protocol is ',pm.environment.get(\"protocol\"));\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType/:object",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType",
												":object"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "DE-BY-NUL"
												},
												{
													"key": "object",
													"value": "NamedValue_Raw_Values"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_SpecificObect_ByLocode_ByIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cd8b993-a608-4300-8d86-4ae8ae88d7d4",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"\r",
													"\r",
													"//->2.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 50000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 4MB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(4000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType/:object/id/",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType",
												":object",
												"id",
												""
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "DE-BW-FDH"
												},
												{
													"key": "object",
													"value": "IntersectionStatus"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_SpecificObect_ByLocode_ById",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f7f10c5-44f2-43a2-87cf-79183ed6587d",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"\r",
													"\r",
													"//->2.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 50000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 4MB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(4000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType/:object/id/:id/",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType",
												":object",
												"id",
												":id",
												""
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "DE-BW-FDH"
												},
												{
													"key": "object",
													"value": "IntersectionStatus"
												},
												{
													"key": "id",
													"value": "K204"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative-TestCases",
							"item": [
								{
									"name": "Get_TMS_ByLocode  with invalid locode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ddc75d9-e495-4641-acf1-c16b7c0e9cde",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"    \r",
													"pm.test(\"Check the message in response is No TMS found for given locode\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No TMS found for given locode\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "IOT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Objects_ByLocode With Invalid Locode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57925970-3d76-4f21-b796-4d93ab12d28c",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"    \r",
													"pm.test(\"Check the message in response is No objects configured for given locode\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No objects configured for given locode\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "IOT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_SpecificObect_ByLocode with Invalid Object",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e13672bc-3bb5-4ce2-8911-197cd8e1c2e0",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Object type is not configured\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Object type is not configured\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType/:object",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType",
												":object"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "{{LOCODE}}"
												},
												{
													"key": "object",
													"value": "IOT"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "OnlineData(hot)-KafkaConnector-Presto",
					"item": [
						{
							"name": "Subscribe The Topic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82dc64f7-9ca0-434e-b73a-26c0b63484c6",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Request was successful and Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present in response\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present in response\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"Length of json response data =\" +jsonData.length);\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 50000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 4MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(4000000);\r",
											"});\r",
											"//->9.Verify the Response  data \r",
											"var jsonData = pm.response.json(); \r",
											"\r",
											"pm.test(\"Response is not null\", function () { \r",
											"        pm.expect(jsonData).to.not.equal(null);\r",
											"    });\r",
											"\r",
											"\r",
											"//->10.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData)\r",
											"\r",
											"//->10.json data parsing \r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"key\", jsonData.dataEndpoint.key);\r",
											"postman.setEnvironmentVariable(\"id\", jsonData.id);\r",
											"postman.setEnvironmentVariable(\"consumerId\", jsonData.consumerId);\r",
											"postman.setEnvironmentVariable(\"category\", jsonData.category);\r",
											"postman.setEnvironmentVariable(\"OBJECT_TYPE\", jsonData.filters[0].value);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": \"{{category}}\",\r\n  \"filters\": [\r\n   {\r\n      \"type\": \"OBJECT_TYPE\",\r\n      \"value\": \"{{OBJECT_TYPE}}\"\r\n    },\r\n    {\r\n      \"type\": \"LOCODE\",\r\n      \"value\": \"{{LOCODE}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										""
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Subscriptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e35676f0-d378-433f-894a-d6eba7a33bcf",
										"exec": [
											"",
											"//->1.Verify the status code in response body",
											"pm.test(\"Request was successful and Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											"",
											"//->2.Verify the Header is present or not ",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    ",
											"//->3.Verify the response should be successfull",
											"pm.test(\"response should be okay to process\", function () { ",
											"    pm.response.to.not.be.error; ",
											"    pm.response.to.not.have.jsonBody(\"error\"); ",
											"});",
											" ",
											"// ->4.Verify the response must be valid json body ",
											"pm.test(\"response must be valid and have a json body\", function () {",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"});",
											"",
											"//->5. Verify the Response headers ",
											"pass = true;",
											"fail = false;",
											"",
											"if (responseCode.code === 200 || responseCode.code === 201) {",
											"    tests[\"Request Succesfully Sent\"] = pass;",
											"",
											"    headers = {",
											"        \"Content-Type\": \"application/json\"",
											"    }",
											"",
											"    for (var i in headers) {",
											"        result = postman.getResponseHeader(i);",
											"        if (headers[i] === result)",
											"            tests[i + \" header value is present\"] = pass;",
											"        else",
											"            tests[i + \" header value is not present\"] = fail;",
											"",
											"    }",
											"    ",
											"}",
											"",
											"});",
											"",
											"//->6.print the json response ",
											"var jsonData = pm.response.json(); ",
											"console.log(jsonData);",
											"//->7.Verify the Response Time ",
											"pm.test(\"Response time is less than 50000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(50000);",
											"});",
											"//->8.Verify the Response Size",
											"pm.test(\"Response size is less than 4MB\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.below(4000000);",
											"});",
											"//->9.Verify the Response  data ",
											"var jsonData = pm.response.json(); ",
											"",
											"pm.test(\"Response is not null\", function () { ",
											"        pm.expect(jsonData).to.not.equal(null);",
											"    });",
											"",
											"//->10.print the json response length",
											"var jsonData = pm.response.json(); ",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get One Subscription Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e09c9323-89ac-410a-ab99-1b095e398a60",
										"exec": [
											"",
											"//->1.Verify the status code in response body",
											"pm.test(\"Request was successful and Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											"",
											"//->2.Verify the Header is present or not ",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    ",
											"//->3.Verify the response should be successfull",
											"pm.test(\"response should be okay to process\", function () { ",
											"    pm.response.to.not.be.error; ",
											"    pm.response.to.not.have.jsonBody(\"error\"); ",
											"});",
											" ",
											"// ->4.Verify the response must be valid json body ",
											"pm.test(\"response must be valid and have a json body\", function () {",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"});",
											"",
											"//->5. Verify the Response headers ",
											"pass = true;",
											"fail = false;",
											"",
											"if (responseCode.code === 200 || responseCode.code === 201) {",
											"    tests[\"Request Succesfully Sent\"] = pass;",
											"",
											"    headers = {",
											"        \"Content-Type\": \"application/json\"",
											"    }",
											"",
											"    for (var i in headers) {",
											"        result = postman.getResponseHeader(i);",
											"        if (headers[i] === result)",
											"            tests[i + \" header value is present\"] = pass;",
											"        else",
											"            tests[i + \" header value is not present\"] = fail;",
											"",
											"    }",
											"    ",
											"}",
											"",
											"});",
											"",
											"//->6.print the json response ",
											"var jsonData = pm.response.json(); ",
											"console.log(jsonData);",
											"//->7.Verify the Response Time ",
											"pm.test(\"Response time is less than 50000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(50000);",
											"});",
											"//->8.Verify the Response Size",
											"pm.test(\"Response size is less than 4MB\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.below(4000000);",
											"});",
											"//->9.Verify the Response  data ",
											"var jsonData = pm.response.json(); ",
											"pm.test(\"Response is not null\", function () { ",
											"        pm.expect(jsonData).to.not.equal(null);",
											"    });",
											"/*",
											"pm.test(\"consumerId field is present in response\", function () { ",
											"        pm.expect(jsonData.consumerId).is.to.equal(\"FlowAI\"); ",
											"    });",
											"pm.test(\"category field is present in response\", function () { ",
											"        pm.expect(jsonData.category).is.to.equal(\"TRAFFIC\"); ",
											"    });",
											"    ",
											"pm.test(\"Filter field is present in response\", function () { ",
											"        pm.expect(jsonData.filters[0].type).is.to.equal(\"OBJECT_TYPE\");",
											"    });",
											"    ",
											"pm.test(\"dataEndpoint field is present in response\", function () { ",
											"        pm.expect(jsonData.dataEndpoint.type).is.to.equal(\"REST\");",
											"    });  ",
											"    ",
											"*/",
											"//->10.print the json response length",
											"var jsonData = pm.response.json(); ",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										":id"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										},
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get records as per the category and Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41ec2e93-a723-4a33-bc12-4f1a1ba10b86",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Request was successful and Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     // assert that the status code is 200\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData);\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 50000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 4MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(4000000);\r",
											"});\r",
											"//->9.print the json response length\r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
											"\r",
											"//->10.Verify the Response  data \r",
											"var jsonData = pm.response.json(); \r",
											"pm.test(\"Response is not null\", function () { \r",
											"        pm.expect(jsonData).to.not.equal(null);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"data",
										":consumerId",
										":category",
										":key"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										},
										{
											"key": "category",
											"value": "{{category}}"
										},
										{
											"key": "key",
											"value": "{{key}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Subscription By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c967d723-5800-4969-a3f4-73bae045074a",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Request was successful and Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     // assert that the status code is 200\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData);\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 50000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 4MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(4000000);\r",
											"});\r",
											"\r",
											"\r",
											"//->9.print the json response length\r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										":id"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										},
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "HistoricalData-Hive s3-Presto",
					"item": [
						{
							"name": "Subscribe The Topic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cacc2531-6f8c-4f08-9501-87719f62f91d",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Request was successful and Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present in response\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present in response\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"Length of json response data =\" +jsonData.length);\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 50000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 4MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(4000000);\r",
											"});\r",
											"\r",
											"//->9.Verify the Response  data \r",
											"var jsonData = pm.response.json(); \r",
											"\r",
											"pm.test(\"Response is not null\", function () { \r",
											"        pm.expect(jsonData).to.not.equal(null);\r",
											"    });\r",
											"/*\r",
											"pm.test(\"consumerId field is present in response\", function () { \r",
											"        pm.expect(jsonData.consumerId).is.to.equal(\"FlowAI\"); \r",
											"    });\r",
											"pm.test(\"category field is present in response\", function () { \r",
											"        pm.expect(jsonData.category).is.to.equal(\"TRAFFIC\"); \r",
											"    });\r",
											"    \r",
											"pm.test(\"Filter field is present in response\", function () { \r",
											"        pm.expect(jsonData.filters[0].type).is.to.equal(\"OBJECT_TYPE\");\r",
											"        pm.expect(jsonData.filters[1].type).is.to.equal(\"LOCODE\");\r",
											"    });\r",
											"    \r",
											"pm.test(\"dataEndpoint field is present in response\", function () { \r",
											"        pm.expect(jsonData.dataEndpoint.type).is.to.equal(\"REST\");\r",
											"    });  \r",
											"*/\r",
											"//->9.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData)\r",
											"\r",
											"//->10.json data parsing \r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"key\", jsonData.dataEndpoint.key);\r",
											"postman.setEnvironmentVariable(\"id\", jsonData.id);\r",
											"postman.setEnvironmentVariable(\"consumerId\", jsonData.consumerId);\r",
											"postman.setEnvironmentVariable(\"category\", jsonData.category);\r",
											"postman.setEnvironmentVariable(\"OBJECT_TYPE\", jsonData.filters[0].value);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME1}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME1}}\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										""
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Subscriptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50c3d91d-d3d3-4aaf-9b87-d274f3aecb94",
										"exec": [
											"",
											"//->1.Verify the status code in response body",
											"pm.test(\"Request was successful and Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											"",
											"//->2.Verify the Header is present or not ",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    ",
											"//->3.Verify the response should be successfull",
											"pm.test(\"response should be okay to process\", function () { ",
											"    pm.response.to.not.be.error; ",
											"    pm.response.to.not.have.jsonBody(\"error\"); ",
											"});",
											" ",
											"// ->4.Verify the response must be valid json body ",
											"pm.test(\"response must be valid and have a json body\", function () {",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"});",
											"",
											"//->5. Verify the Response headers ",
											"pass = true;",
											"fail = false;",
											"",
											"if (responseCode.code === 200 || responseCode.code === 201) {",
											"    tests[\"Request Succesfully Sent\"] = pass;",
											"",
											"    headers = {",
											"        \"Content-Type\": \"application/json\"",
											"    }",
											"",
											"    for (var i in headers) {",
											"        result = postman.getResponseHeader(i);",
											"        if (headers[i] === result)",
											"            tests[i + \" header value is present\"] = pass;",
											"        else",
											"            tests[i + \" header value is not present\"] = fail;",
											"",
											"    }",
											"    ",
											"}",
											"",
											"});",
											"",
											"//->6.print the json response ",
											"var jsonData = pm.response.json(); ",
											"console.log(jsonData);",
											"//->7.Verify the Response Time ",
											"pm.test(\"Response time is less than 50000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(50000);",
											"});",
											"//->8.Verify the Response Size",
											"pm.test(\"Response size is less than 4MB\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.below(4000000);",
											"});",
											"//->9.Verify the Response  data ",
											"var jsonData = pm.response.json(); ",
											"",
											"pm.test(\"Response is not null\", function () { ",
											"        pm.expect(jsonData).to.not.equal(null);",
											"    });",
											"/*",
											"pm.test(\"consumerId field is present in response\", function () { ",
											"        pm.expect(jsonData[0].consumerId).is.to.equal(\"FlowAI\"); ",
											"    });",
											"pm.test(\"category field is present in response\", function () { ",
											"        pm.expect(jsonData[0].category).is.to.equal(\"TRAFFIC\"); ",
											"    });",
											"    ",
											"pm.test(\"Filter field is present in response\", function () { ",
											"        pm.expect(jsonData[0].filters[0].type).is.to.equal(\"OBJECT_TYPE\");",
											"    });",
											"    ",
											"pm.test(\"dataEndpoint field is present in response\", function () { ",
											"        pm.expect(jsonData[0].dataEndpoint.type).is.to.equal(\"REST\");",
											"    });  ",
											"*/",
											"//->9.print the json response length",
											"var jsonData = pm.response.json(); ",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}",
											"description": "sGuard"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get One Subscription Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d4bd584-8ca8-4e7d-9d87-2c7db0853f7a",
										"exec": [
											"",
											"//->1.Verify the status code in response body",
											"pm.test(\"Request was successful and Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											"",
											"//->2.Verify the Header is present or not ",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    ",
											"//->3.Verify the response should be successfull",
											"pm.test(\"response should be okay to process\", function () { ",
											"    pm.response.to.not.be.error; ",
											"    pm.response.to.not.have.jsonBody(\"error\"); ",
											"});",
											" ",
											"// ->4.Verify the response must be valid json body ",
											"pm.test(\"response must be valid and have a json body\", function () {",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"});",
											"",
											"//->5. Verify the Response headers ",
											"pass = true;",
											"fail = false;",
											"",
											"if (responseCode.code === 200 || responseCode.code === 201) {",
											"    tests[\"Request Succesfully Sent\"] = pass;",
											"",
											"    headers = {",
											"        \"Content-Type\": \"application/json\"",
											"    }",
											"",
											"    for (var i in headers) {",
											"        result = postman.getResponseHeader(i);",
											"        if (headers[i] === result)",
											"            tests[i + \" header value is present\"] = pass;",
											"        else",
											"            tests[i + \" header value is not present\"] = fail;",
											"",
											"    }",
											"    ",
											"}",
											"",
											"});",
											"",
											"//->6.print the json response ",
											"var jsonData = pm.response.json(); ",
											"console.log(jsonData);",
											"//->7.Verify the Response Time ",
											"pm.test(\"Response time is less than 50000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(50000);",
											"});",
											"//->8.Verify the Response Size",
											"pm.test(\"Response size is less than 4MB\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.below(4000000);",
											"});",
											"",
											"//->9.Verify the Response  data ",
											"var jsonData = pm.response.json(); ",
											"pm.test(\"Response is not null\", function () { ",
											"        pm.expect(jsonData).to.not.equal(null);",
											"    });",
											"/*",
											"pm.test(\"consumerId field is present in response\", function () { ",
											"        pm.expect(jsonData.consumerId).is.to.equal(\"FlowAI\"); ",
											"    });",
											"pm.test(\"category field is present in response\", function () { ",
											"        pm.expect(jsonData.category).is.to.equal(\"TRAFFIC\"); ",
											"    });",
											"    ",
											"pm.test(\"Filter field is present in response\", function () { ",
											"        pm.expect(jsonData.filters[0].type).is.to.equal(\"OBJECT_TYPE\");",
											"    });",
											"    ",
											"pm.test(\"dataEndpoint field is present in response\", function () { ",
											"        pm.expect(jsonData.dataEndpoint.type).is.to.equal(\"REST\");",
											"    });  ",
											"    ",
											"*/",
											"//->10.print the json response length",
											"var jsonData = pm.response.json(); ",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										":id"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										},
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get records as per the category and Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1105cda9-6537-471c-a856-6dd226b4adb0",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Request was successful and Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     // assert that the status code is 200\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData);\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 50000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 4MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(4000000);\r",
											"});\r",
											"\r",
											"//->9.print the json response length\r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
											"\r",
											"//->10.Verify the Response  data \r",
											"var jsonData = pm.response.json(); \r",
											"pm.test(\"Response is not null\", function () { \r",
											"        pm.expect(jsonData).to.not.equal(null);\r",
											"    });\r",
											"\r",
											"/*\r",
											"pm.test(\"contextobjectType field is present in response\", function () { \r",
											"pm.expect(jsonData[0].context.objectType).is.to.equal(pm.environment.get(\"contextobjectType\")); \r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"locationCountry field is present in response\", function () { \r",
											"pm.expect(jsonData[0].context.location.locationCountry).is.to.equal(pm.environment.get(\"locationCountry\")); \r",
											"    });\r",
											"        \r",
											"pm.test(\"locationDivision field is present in response\", function () { \r",
											"pm.expect(jsonData[0].context.location.locationDivision).is.to.equal(pm.environment.get(\"locationDivision\")); \r",
											"    }); \r",
											"    \r",
											"pm.test(\"locationCity field is present in response\", function () { \r",
											"pm.expect(jsonData[0].context.location.locationCity).is.to.equal(pm.environment.get(\"locationCity\")); \r",
											"    }); \r",
											"    \r",
											" //->10.json data parsing \r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"contextobjectType\", jsonData[0].context.objectType);\r",
											"postman.setEnvironmentVariable(\"contextobjectId\", jsonData[0].context.objectId);\r",
											"postman.setEnvironmentVariable(\"contexttimestamp\", jsonData[0].context.timestamp);\r",
											"postman.setEnvironmentVariable(\"locationCountry\", jsonData[0].context.location.locationCountry);\r",
											"postman.setEnvironmentVariable(\"locationDivision\", jsonData[0].context.location.locationDivision);\r",
											"postman.setEnvironmentVariable(\"locationCity\", jsonData[0].context.location.locationCity);\r",
											"postman.setEnvironmentVariable(\"coredataid\", jsonData[0].coredata.id);\r",
											"postman.setEnvironmentVariable(\"controllerId\", jsonData[0].coredata.controllerId);\r",
											"postman.setEnvironmentVariable(\"coredatatimestamp\", jsonData[0].coredata.timestamp);\r",
											"postman.setEnvironmentVariable(\"publishing_timestamp\", jsonData[0].coredata.publishing_timestamp);\r",
											"\r",
											"console.log('contextobjectType is ',pm.environment.get(\"contextobjectType\"));\r",
											"console.log('contextobjectId is ',pm.environment.get(\"contextobjectId\"));\r",
											"console.log('contexttimestamp is ',pm.environment.get(\"contexttimestamp\"));\r",
											"console.log('locationCountry is ',pm.environment.get(\"locationCountry\"));\r",
											"console.log('locationDivision is ',pm.environment.get(\"locationDivision\"));\r",
											"console.log('locationCity is ',pm.environment.get(\"locationCity\"));\r",
											"console.log('coredataid is ',pm.environment.get(\"coredataid\"));\r",
											"console.log('controllerId is ',pm.environment.get(\"controllerId\"));\r",
											"console.log('coredatatimestamp is ',pm.environment.get(\"coredatatimestamp\"));\r",
											"console.log('publishing_timestamp is ',pm.environment.get(\"publishing_timestamp\"));\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"data",
										":consumerId",
										":category",
										":key"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										},
										{
											"key": "category",
											"value": "{{category}}"
										},
										{
											"key": "key",
											"value": "{{key}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Subscription By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d5b8e19-9ce9-4dd8-8cef-2eefea81639f",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Request was successful and Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     // assert that the status code is 200\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData);\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 50000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
											"});\r",
											"//->7.Verify the Response Size\r",
											"pm.test(\"Response size is less than 4MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(4000000);\r",
											"});\r",
											"\r",
											"//->9.print the json response length\r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRYlVkcW1PQ0lsb3BwN1M5VWJoR1VIWTZGNGs1UGhOc0ZhNHphR3VsemVzIn0.eyJqdGkiOiJiMjk3YWY3Mi1kYmM3LTQzYmQtOGYwNS1mMmM0YTUzMjAwMjIiLCJleHAiOjE1OTM4NDkxNzEsIm5iZiI6MCwiaWF0IjoxNTkyOTg1MTcxLCJpc3MiOiJodHRwczovL2lhbS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vYXV0aC9yZWFsbXMvaXRzIiwiYXVkIjpbInRkYiIsImFjY291bnQiXSwic3ViIjoiYjVkYTdmMjctODM0ZC00OGQ5LWEwMzAtYmE1ZThhYjg3MDM2IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY3VybCIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImZlOGZkZjVmLWY0YjQtNDdmNy1iYjg0LTEwZmVhM2QxZDRjNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9kYXRhLWFwaS50ZGIudGVzdC5pdHMtc2llbWVucy5jb20vKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiIsImRhdGEtYXBpLWFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsidGRiIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6ImVtYWlsIHByb2ZpbGUiLCJhdHRyX29iaiI6IioiLCJhdHRyX2xvY29kZSI6IioiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InFhLXRlc3QiLCJlbWFpbCI6InFhLnRlc3RAc2llbWVucy5jb20ifQ.gXwQ0p5KMuztPAviIzagmMuMtFfB-DZJxcRpd91HMmTS1uvutrDvqC0JlAjB3NxAiuMqR9v4nT9Igg3sRnsxUawa6_aU1tp8zhQvdfkR1kyz8dhqZYSNtoqqbraUzXCXJmFfIqFCvI4kYJd1h6j2ufbaM-7xaAgOCMdy0vepwau1IAIK4Z8gx5-GIvzLVgijOCFedBRkAXjEvJeoT0SQPaqyHjcNSuTzs1TsC_NPAR8qsfk2QIicipt-6tcLCCT8YE0v4Bsh0hMqabysuCxR8tkGiOs6on7bxKxZQ3jbnskdAnS8ceWFekDHJ4KNQKaXrf0WkXGXJVAUkBvLGb5xig",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										":id"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										},
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Folder for v1",
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}