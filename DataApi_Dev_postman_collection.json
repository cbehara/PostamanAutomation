{
	"info": {
		"_postman_id": "4f3a8452-4105-46fe-aede-b69db2047862",
		"name": "DataApi_Dev",
		"description": "This collection which contains IntermedaiteData and MetaData API services \n\nIntermedaiteData:\n1.POST-Subscribe The Topic\n2.GET-All Subscriptions Data\n3.GET-One Subscription Data\n4.GET-Data As per Subscription Key\n5.DELETE-Subscription By ID\n\nMetaData:\n1.GetAll_TMS_Records\n2.Get_TMS_ByLocode\n3.Get_Objects_ByLocode\n4.Get_SpecificObect_ByLocode",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "v1",
			"item": [
				{
					"name": "MetaData",
					"item": [
						{
							"name": "GET-Positive",
							"item": [
								{
									"name": "GetAll_TMS_Records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8ca57f9-425c-407c-bf18-5267efdfaf08",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(10000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												""
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_TMS_ByLocode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8706a0ef-d692-42d5-bfb1-d7b736b11f65",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"tmsUrl field is present in response\", function () { \r",
													"        pm.expect(jsonData[0].tmsUrl).is.to.equal(\"http://neuulm.crsp/cs/ocpi-2\"); \r",
													"    });\r",
													"pm.test(\"tmsName field is present in response\", function () { \r",
													"        pm.expect(jsonData[0].tmsName).is.to.equal(\"neuulm.crsp/cs/ocpi-2\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"locode field is present in response\", function () { \r",
													"        pm.expect(jsonData[0].locode).is.to.equal(\"DE-BY-NUL\"); \r",
													"    });\r",
													"    */\r",
													" //->10.json data parsing \r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"tmsUrl\", jsonData[0].tmsUrl);\r",
													"postman.setEnvironmentVariable(\"tmsName\", jsonData[0].tmsName);\r",
													"postman.setEnvironmentVariable(\"locode\", jsonData[0].locode);\r",
													"\r",
													" \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "{{Metadatalocode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Objects_ByLocode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "802ab041-6683-413a-af20-8baba3d44aef",
												"exec": [
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 50000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													" \r",
													"//->10.json data parsing \r",
													"/*var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"objectName\", jsonData[20].objectName);\r",
													"postman.setEnvironmentVariable(\"protocol\", jsonData[20].protocol);\r",
													"\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}",
													"type": "string"
												},
												{
													"key": "locode",
													"value": "{{Metadatalocode}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_SpecificObect_ByLocode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3966903-5b3c-474f-8da5-e0ff3927693d",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													"//->3.Verify the response should be successfull\r",
													"pm.test(\"response should be okay to process\", function () { \r",
													"    pm.response.to.not.be.error; \r",
													"    pm.response.to.not.have.jsonBody(\"error\"); \r",
													"});\r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 200 || responseCode.code === 201) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 50000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(50000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"/*pm.test(\"tmsName field is present in response\", function () { \r",
													"        pm.expect(jsonData.tmsName).is.to.equal(\"neuulm.crsp/cs/ocpi-2\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"locode field is present in response\", function () { \r",
													"        pm.expect(jsonData.locode).is.to.equal(\"DE-BY-NUL\"); \r",
													"    });\r",
													"    \r",
													"     \r",
													"pm.test(\"ObjectName field is present in response\", function () { \r",
													"        pm.expect(jsonData.objectName).is.to.equal(pm.environment.get(\"objectName\")); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Protocol field is present in response\", function () { \r",
													"        pm.expect(jsonData.protocol).is.to.equal(pm.environment.get(\"protocol\")); \r",
													"    });\r",
													" //->10.json data parsing \r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"objectName\", jsonData.objectName);\r",
													"postman.setEnvironmentVariable(\"protocol\", jsonData.protocol);\r",
													"console.log('objectName is ',pm.environment.get(\"objectName\"));\r",
													"console.log('protocol is ',pm.environment.get(\"protocol\"));\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType/:object",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType",
												":object"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}",
													"type": "string"
												},
												{
													"key": "locode",
													"value": "{{Metadatalocode}}",
													"type": "string"
												},
												{
													"key": "object",
													"value": "{{MetadataobjectName}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_SpecificObect_ByLocode_ByIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8b71080-62bb-4f1b-911a-c340f751f485",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"\r",
													"\r",
													"//->2.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 100000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 2mb\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"ID\", jsonData[0].id);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType/:object/id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType",
												":object",
												"id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}",
													"type": "string"
												},
												{
													"key": "locode",
													"value": "{{Metadatalocode}}",
													"type": "string"
												},
												{
													"key": "object",
													"value": "{{MetadataobjectName}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_SpecificObect_ByLocode_ById",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8b71080-62bb-4f1b-911a-c340f751f485",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"}); \r",
													"\r",
													"\r",
													"//->2.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 100000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(100000);\r",
													"});\r",
													"//->8.Verify the Response Size\r",
													"pm.test(\"Response size is less than 2mb\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
													"});\r",
													"\r",
													"//->9.print the json response length\r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType/:object/id/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType",
												":object",
												"id",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}",
													"type": "string"
												},
												{
													"key": "locode",
													"value": "{{Metadatalocode}}",
													"type": "string"
												},
												{
													"key": "object",
													"value": "{{MetadataobjectName}}",
													"type": "string"
												},
												{
													"key": "id",
													"value": "{{ID}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GET-Negative",
							"item": [
								{
									"name": "Get_TMS_ByLocode  with invalid locode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8706a0ef-d692-42d5-bfb1-d7b736b11f65",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"    \r",
													"pm.test(\"Check the message in response is No TMS found for given locode\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No TMS found for given locode\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "IOT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Objects_ByLocode With Invalid Locode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "802ab041-6683-413a-af20-8baba3d44aef",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"    \r",
													"pm.test(\"Check the message in response is No objects configured for given locode\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No objects configured for given locode\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "IOT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_SpecificObect_ByLocode with Invalid Object",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3966903-5b3c-474f-8da5-e0ff3927693d",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Object type is not configured\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Object type is not configured\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v1/api/metadata/:consumerId/tms/:locode/objectType/:object",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"metadata",
												":consumerId",
												"tms",
												":locode",
												"objectType",
												":object"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId1}}"
												},
												{
													"key": "locode",
													"value": "{{LOCODE}}"
												},
												{
													"key": "object",
													"value": "IOT"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"auth": {
						"type": "oauth2",
						"oauth2": [
							{
								"key": "accessToken",
								"value": "{{metadataToken}}",
								"type": "string"
							},
							{
								"key": "tokenType",
								"value": "bearer",
								"type": "string"
							},
							{
								"key": "addTokenTo",
								"value": "header",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "21751527-d16a-4444-856f-22a158c5ee4d",
								"type": "text/javascript",
								"exec": [
									"const getTokenRequest = {",
									"  url: 'https://iam-synapses.iot.dev.its-siemens.com/auth/realms/its/protocol/openid-connect/token',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/x-www-form-urlencoded',",
									"  body: {",
									"    mode: 'application/x-www-form-urlencoded',",
									"    raw: \"client_id=curl&grant_type=password&password=admin&scope=\\\"openid\\\",\\\"offline_access\\\",\\\"profile\\\",\\\"email\\\"&username=tdb-user\"",
									"  }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"    let jsonResponse = response.json(),",
									"        newAccessToken = jsonResponse.access_token;",
									"",
									"    console.log({ err, jsonResponse, newAccessToken })",
									"",
									"    pm.environment.set('metadataToken', newAccessToken);",
									"    pm.variables.set('metadataToken', newAccessToken);",
									"}); "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5444cc6a-87af-460f-920d-0ed699197bfc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "OnlineData",
					"item": [
						{
							"name": "Subscribe The Topic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c334e7dd-f6d2-429d-ab7c-e8a50690f552",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,504]);\r",
											"});\r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											"\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"Length of json response data =\" +jsonData.length);\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->7.Verify the Response Size\r",
											"pm.test(\"Response size is less than 2MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
											"});\r",
											"\r",
											"//->8.Verify the Response  data \r",
											"var jsonData = pm.response.json(); \r",
											"\r",
											"pm.test(\"Response is not null\", function () { \r",
											"        pm.expect(jsonData).to.not.equal(null);\r",
											"    });\r",
											"\r",
											"\r",
											"//->9.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData)\r",
											"\r",
											"//->10.json data parsing \r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"key\", jsonData.dataEndpoint.key);\r",
											"postman.setEnvironmentVariable(\"id\", jsonData.id);\r",
											"postman.setEnvironmentVariable(\"consumerId\", jsonData.consumerId);\r",
											"postman.setEnvironmentVariable(\"category\", jsonData.category);\r",
											"postman.setEnvironmentVariable(\"OBJECT_TYPE\", jsonData.filters[0].value);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": \"{{category}}\",\r\n  \"filters\": [\r\n    {\r\n      \"type\": \"OBJECT_TYPE\",\r\n      \"value\": \"{{OBJECT_TYPE}}\"\r\n    },\r\n    {\r\n      \"type\": \"LOCODE\",\r\n      \"value\": \"{{LOCODE}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										""
									],
									"variable": [
										{
											"key": "consumerId",
											"type": "string",
											"value": "{{consumerid2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Subscriptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ef1d2d8-942b-4851-ada9-51cba8549276",
										"exec": [
											"",
											"//->1.Verify the status code in response body",
											"pm.test(\"Request was successful and Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											"",
											"//->2.Verify the Header is present or not ",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    ",
											"//->3.Verify the response should be successfull",
											"pm.test(\"response should be okay to process\", function () { ",
											"    pm.response.to.not.be.error; ",
											"    pm.response.to.not.have.jsonBody(\"error\"); ",
											"});",
											" ",
											"// ->4.Verify the response must be valid json body ",
											"pm.test(\"response must be valid and have a json body\", function () {",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"});",
											"",
											"//->5. Verify the Response headers ",
											"pass = true;",
											"fail = false;",
											"",
											"if (responseCode.code === 200 || responseCode.code === 201) {",
											"    tests[\"Request Succesfully Sent\"] = pass;",
											"",
											"    headers = {",
											"        \"Content-Type\": \"application/json\"",
											"    }",
											"",
											"    for (var i in headers) {",
											"        result = postman.getResponseHeader(i);",
											"        if (headers[i] === result)",
											"            tests[i + \" header value is present\"] = pass;",
											"        else",
											"            tests[i + \" header value is not present\"] = fail;",
											"",
											"    }",
											"    ",
											"}",
											"",
											"});",
											"",
											"//->6.print the json response ",
											"var jsonData = pm.response.json(); ",
											"console.log(jsonData);",
											"",
											"//->7.Verify the Response Time ",
											"pm.test(\"Response time is less than 30000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"//->7.Verify the Response Size",
											"pm.test(\"Response size is less than 2MB\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.below(2000000);",
											"});",
											"",
											"//->8.Verify the Response  data ",
											"var jsonData = pm.response.json(); ",
											"/*",
											"pm.test(\"Response is not null\", function () { ",
											"        pm.expect(jsonData).to.not.equal(null);",
											"    });",
											"",
											"pm.test(\"consumerId field is present in response\", function () { ",
											"        pm.expect(jsonData[0].consumerId).is.to.equal(\"FlowAI\"); ",
											"    });",
											"pm.test(\"category field is present in response\", function () { ",
											"        pm.expect(jsonData[0].category).is.to.equal(\"TRAFFIC\"); ",
											"    });",
											"    ",
											"pm.test(\"Filter field is present in response\", function () { ",
											"        pm.expect(jsonData[0].filters[0].type).is.to.equal(\"OBJECT_TYPE\");",
											"    });",
											"    ",
											"pm.test(\"dataEndpoint field is present in response\", function () { ",
											"        pm.expect(jsonData[0].dataEndpoint.type).is.to.equal(\"REST\");",
											"    });  ",
											"*/",
											"//->9.print the json response length",
											"var jsonData = pm.response.json(); ",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get One Subscription Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89f6c6a5-9460-4424-b9e1-08d08bfbc5ae",
										"exec": [
											"",
											"//->1.Verify the status code in response body",
											"pm.test(\"Request was successful and Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											"",
											"//->2.Verify the Header is present or not ",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    ",
											"//->3.Verify the response should be successfull",
											"pm.test(\"response should be okay to process\", function () { ",
											"    pm.response.to.not.be.error; ",
											"    pm.response.to.not.have.jsonBody(\"error\"); ",
											"});",
											" ",
											"// ->4.Verify the response must be valid json body ",
											"pm.test(\"response must be valid and have a json body\", function () {",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"});",
											"",
											"//->5. Verify the Response headers ",
											"pass = true;",
											"fail = false;",
											"",
											"if (responseCode.code === 200 || responseCode.code === 201) {",
											"    tests[\"Request Succesfully Sent\"] = pass;",
											"",
											"    headers = {",
											"        \"Content-Type\": \"application/json\"",
											"    }",
											"",
											"    for (var i in headers) {",
											"        result = postman.getResponseHeader(i);",
											"        if (headers[i] === result)",
											"            tests[i + \" header value is present\"] = pass;",
											"        else",
											"            tests[i + \" header value is not present\"] = fail;",
											"",
											"    }",
											"    ",
											"}",
											"",
											"});",
											"",
											"//->6.print the json response ",
											"var jsonData = pm.response.json(); ",
											"console.log(jsonData);",
											"",
											"//->7.Verify the Response Time ",
											"pm.test(\"Response time is less than 30000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"//->7.Verify the Response Size",
											"pm.test(\"Response size is less than 15KB\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.below(15000);",
											"});",
											"",
											"//->8.Verify the Response  data ",
											"var jsonData = pm.response.json(); ",
											"pm.test(\"Response is not null\", function () { ",
											"        pm.expect(jsonData).to.not.equal(null);",
											"    });",
											"/*",
											"pm.test(\"consumerId field is present in response\", function () { ",
											"        pm.expect(jsonData.consumerId).is.to.equal(\"FlowAI\"); ",
											"    });",
											"pm.test(\"category field is present in response\", function () { ",
											"        pm.expect(jsonData.category).is.to.equal(\"TRAFFIC\"); ",
											"    });",
											"    ",
											"pm.test(\"Filter field is present in response\", function () { ",
											"        pm.expect(jsonData.filters[0].type).is.to.equal(\"OBJECT_TYPE\");",
											"    });",
											"    ",
											"pm.test(\"dataEndpoint field is present in response\", function () { ",
											"        pm.expect(jsonData.dataEndpoint.type).is.to.equal(\"REST\");",
											"    });  ",
											"    ",
											"*/",
											"//->9.print the json response length",
											"var jsonData = pm.response.json(); ",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										":id"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										},
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get records as per the category and Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d720334-e852-4745-8219-37c1857fedc2",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
											"});\r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 2MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(5000000);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"data",
										":consumerId",
										":category",
										":key"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										},
										{
											"key": "category",
											"value": "{{category}}"
										},
										{
											"key": "key",
											"value": "{{key}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get records as per the category and Key By Size",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e982578e-03b1-4541-acd8-aa4676f11bc7",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
											"});\r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 2MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(5000000);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/data/:consumerId/:category/:key?size=3000000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"data",
										":consumerId",
										":category",
										":key"
									],
									"query": [
										{
											"key": "size",
											"value": "3000000"
										}
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										},
										{
											"key": "category",
											"value": "{{category}}"
										},
										{
											"key": "key",
											"value": "{{key}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Subscription By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99bdade9-2c43-4c3a-bffb-ee0c49f381df",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Request was successful and Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     // assert that the status code is 200\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData);\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 15KB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
											"});\r",
											"\r",
											"\r",
											"//->9.print the json response length\r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										":id"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid2}}"
										},
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "oauth2",
						"oauth2": [
							{
								"key": "accessToken",
								"value": "{{onlinedataToken}}",
								"type": "string"
							},
							{
								"key": "tokenType",
								"value": "bearer",
								"type": "string"
							},
							{
								"key": "addTokenTo",
								"value": "header",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1c9461aa-63c7-4ddd-85fc-e16e500ea779",
								"type": "text/javascript",
								"exec": [
									"const getTokenRequest = {",
									"  url: 'https://iam-synapses.iot.dev.its-siemens.com/auth/realms/its/protocol/openid-connect/token',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/x-www-form-urlencoded',",
									"  body: {",
									"    mode: 'application/x-www-form-urlencoded',",
									"    raw: \"client_id=curl&grant_type=password&password=admin&scope=\\\"openid\\\",\\\"offline_access\\\",\\\"profile\\\",\\\"email\\\"&username=tdb-user\"",
									"  }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"    let jsonResponse = response.json(),",
									"        newAccessToken = jsonResponse.access_token;",
									"",
									"    console.log({ err, jsonResponse, newAccessToken })",
									"",
									"    pm.environment.set('onlinedataToken', newAccessToken);",
									"    pm.variables.set('onlinedataToken', newAccessToken);",
									"}); "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8d473f78-f9db-4c87-bf7e-d632039435cc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative Test Cases of Data-API",
					"item": [
						{
							"name": "Negative-TestCases",
							"item": [
								{
									"name": "Subscrive the topic WIth blank ConsumerID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "efb23477-29ce-4331-a3c3-55564cf12c4f",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(1000000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0b0d55ae-ccfd-4a2c-8bb1-4b57045ed466",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe The Topic  with balnk Catagory",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "abd125af-1b50-4dde-a4ca-b60b29c8ec78",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "beed03cd-4bee-404e-babc-0caa85f1481d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \" \",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe The Topic  with balnk or invalid ObjectType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc417d7a-85c9-403e-9e76-a1b7992e1c1b",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 400\", function () { \r",
													"        pm.expect(jsonData.code).is.to.equal(\"400\"); \r",
													"    });\r",
													"pm.test(\"Check the status in response is BAD_REQUEST\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(\"BAD_REQUEST\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Object Type field is invalid or blank\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Object Type field is invalid or blank\"); \r",
													"    });\r",
													"    */\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3225ac7a-0400-4e5a-8a97-465d3f19a90d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \" \"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe The Topic  with Locode field is invalid or blank",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9e1d8c8-6f6a-476d-baa9-12f5381cd159",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "12460c75-4778-487b-a2ed-6543b1880ac3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"\" \n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe The Topic  without From Time or To Time field is invalid or blank",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adc01163-1040-45f1-a0f4-f6942d8fe389",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9c2b9960-e9d0-434e-843e-dc5b91a4b0b7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\" \n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe The Topic  without AccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02424da0-aa94-4757-9b14-195bd3031541",
												"exec": [
													"/*\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 401) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        \"Transfer-Encoding\" : \"chunked\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"pm.test(\"check the status code in response is 401\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(401); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
													"    });\r",
													"\r",
													"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
													"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													"*/"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "047b09a1-04aa-4206-b57a-bdba35228623",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Subscriptions  with Invalid or blank ConsumerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7de1288-58b5-42b9-a1a3-721a35a06242",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ad3a69d-644c-4d88-a528-14b34bf7e691",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetOne Subscription With Bank or invalid ConsumerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab623b16-f35e-4105-ac68-aff16b4714b2",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(404); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Not Found\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is No message available\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
													"    });\r",
													"    */\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": ""
												},
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetOne Subscription with invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8d8faf6-b302-4999-bf16-5e2ae6ca61e3",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "id",
													"value": "2020"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetOne Subscription without AccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c15ac07-e801-45d1-9286-6d6bd908362c",
												"exec": [
													"/*\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 401) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        \"Transfer-Encoding\" : \"chunked\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"pm.test(\"check the status code in response is 401\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(401); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
													"    });\r",
													"\r",
													"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
													"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Subscriptions Without AccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b926c69d-f5f6-4478-bca0-db3e3044ff0a",
												"exec": [
													"/*\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 401) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        \"Transfer-Encoding\" : \"chunked\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"pm.test(\"check the status code in response is 401\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(401); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
													"    });\r",
													"\r",
													"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
													"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													"*/"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d3b019ed-9d96-4dce-86d2-27d0c73f878c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}",
													"description": "sGuard"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription key with InvalidCategory",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7910785-5e67-4062-a3da-de7fdb45ca86",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 400) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 400\", function () { \r",
													"        pm.expect(jsonData.code).is.to.equal(\"400\"); \r",
													"    });\r",
													"pm.test(\"Check the status in response is BAD_REQUEST\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(\"BAD_REQUEST\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Request Message is Invalid\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Request Message is Invalid\"); \r",
													"    });\r",
													"  */  \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "category",
													"value": "InvalidCategory"
												},
												{
													"key": "key",
													"value": "{{key}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription Key Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ac727c7-6fd6-4641-b44c-1e2db7ce3f2d",
												"exec": [
													"/*\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 401) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        \"Transfer-Encoding\" : \"chunked\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"pm.test(\"check the status code in response is 401\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(401); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
													"    });\r",
													"\r",
													"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
													"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": ""
												},
												{
													"key": "category",
													"value": ""
												},
												{
													"key": "key",
													"value": "{{key}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription Key with Blank ConsumerID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "712c6fd6-56fb-44a2-922f-ae5fa1a05d18",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(404); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Not Found\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is No message available\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
													"    });\r",
													" */   \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": ""
												},
												{
													"key": "category",
													"value": "{{category}}"
												},
												{
													"key": "key",
													"value": "{{key}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription Key with Blank Catagory",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c37c212-eaa6-42f3-bc76-ec07ebb09776",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(404); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Not Found\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is No message available\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
													"    });\r",
													"    */\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "category",
													"value": ""
												},
												{
													"key": "key",
													"value": "{{key}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription Key with Blank key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "990e44ee-3670-43b7-88b3-f5a28bd869ec",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(404); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Not Found\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is No message available\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
													"    });\r",
													"   */ \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "category",
													"value": "{{category}}"
												},
												{
													"key": "key",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Data as per Subscription Key with Invalid key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b36a2035-ce33-4081-a655-ba9c3938cac3",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"/*\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.code).is.to.equal(\"404\"); \r",
													"    });\r",
													"pm.test(\"Check the status in response is NOT_FOUND\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(\"NOT_FOUND\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Consumer ID: FlowAI Category: TRAFFIC Key: APIKEY2020\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Consumer ID: FlowAI Category: TRAFFIC Key: APIKEY2020\"); \r",
													"    });\r",
													"*/    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"data",
												":consumerId",
												":category",
												":key"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "category",
													"value": "{{category}}"
												},
												{
													"key": "key",
													"value": "APIKEY2020"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the Subscription Without AccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afb316a5-a1e3-45e4-9a03-73d94588d357",
												"exec": [
													"/*\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 401) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\",\r",
													"        \"Transfer-Encoding\" : \"chunked\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"\r",
													"pm.test(\"check the status code in response is 401\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(401); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Unauthorized\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Unauthorized\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Access denied due to invalid token\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Access denied due to invalid token\"); \r",
													"    });\r",
													"\r",
													"pm.test(\"Check the message in response is Full authentication is required to access this resource\", function () { \r",
													"        pm.expect(jsonData.error_description).is.to.equal(\"Full authentication is required to access this resource\"); \r",
													"    });\r",
													"    \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"*/\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "accessToken",
													"value": "",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the Subscription with invalid ConsumerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71e53351-aec4-4d6a-8d1b-4973f8191a72",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(404); \r",
													"    });\r",
													"pm.test(\"Check the error in response is Not Found\", function () { \r",
													"        pm.expect(jsonData.error).is.to.equal(\"Not Found\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is No message available\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"No message available\"); \r",
													"    });\r",
													"    */\r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "chakri"
												},
												{
													"key": "id",
													"value": "{{id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete the Subscription with Invalid ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "532860d6-67cc-46ad-91ea-3c5f87dec5c0",
												"exec": [
													"\r",
													"//->1.Verify the status code in response body\r",
													"pm.test(\"Request was successful and Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"}); \r",
													"\r",
													"//->2.Verify the Header is present or not \r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    \r",
													" \r",
													"// ->4.Verify the response must be valid json body \r",
													"pm.test(\"response must be valid and have a json body\", function () {\r",
													"     // assert that the response has a valid JSON body\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
													"});\r",
													"\r",
													"//->5. Verify the Response headers \r",
													"pass = true;\r",
													"fail = false;\r",
													"\r",
													"if (responseCode.code === 404) {\r",
													"    tests[\"Request Succesfully Sent\"] = pass;\r",
													"\r",
													"    headers = {\r",
													"        \"Content-Type\": \"application/json\"\r",
													"    }\r",
													"\r",
													"    for (var i in headers) {\r",
													"        result = postman.getResponseHeader(i);\r",
													"        if (headers[i] === result)\r",
													"            tests[i + \" header value is present in response\"] = pass;\r",
													"        else\r",
													"            tests[i + \" header value is not present in response\"] = fail;\r",
													"\r",
													"    }\r",
													"    \r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"//->6.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(\"Length of json response data =\" +jsonData.length);\r",
													"\r",
													"//->7.Verify the Response Time \r",
													"pm.test(\"Response time is less than 30000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
													"});\r",
													"//->7.Verify the Response Size\r",
													"pm.test(\"Response size is less than 15KB\", function () {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
													"});\r",
													"\r",
													"//->8.Verify the Response  data \r",
													"var jsonData = pm.response.json(); \r",
													"\r",
													"pm.test(\"Response is not null\", function () { \r",
													"        pm.expect(jsonData).to.not.equal(null);\r",
													"    });\r",
													"/*\r",
													"pm.test(\"check the status code in response is 404\", function () { \r",
													"        pm.expect(jsonData.code).is.to.equal(\"404\"); \r",
													"    });\r",
													"pm.test(\"Check the status in response is NOT_FOUND\", function () { \r",
													"        pm.expect(jsonData.status).is.to.equal(\"NOT_FOUND\"); \r",
													"    });\r",
													"    \r",
													"pm.test(\"Check the message in response is Consumer ID: FlowAI id: 2020 not found\", function () { \r",
													"        pm.expect(jsonData.message).is.to.equal(\"Consumer ID: FlowAI id: 2020 not found\"); \r",
													"    });\r",
													"   */ \r",
													"//->9.print the json response \r",
													"var jsonData = pm.response.json(); \r",
													"console.log(jsonData)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"v1",
												"api",
												"subscription",
												":consumerId",
												":id"
											],
											"variable": [
												{
													"key": "consumerId",
													"value": "{{consumerId}}"
												},
												{
													"key": "id",
													"value": "2020"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"auth": {
						"type": "oauth2",
						"oauth2": [
							{
								"key": "accessToken",
								"value": "{{intermediatedataToken}}",
								"type": "string"
							},
							{
								"key": "tokenType",
								"value": "bearer",
								"type": "string"
							},
							{
								"key": "addTokenTo",
								"value": "header",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0250c0c4-0909-4c67-ba4a-57d087e51733",
								"type": "text/javascript",
								"exec": [
									"const getTokenRequest = {",
									"  url: 'https://iam-synapses.iot.dev.its-siemens.com/auth/realms/its/protocol/openid-connect/token',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/x-www-form-urlencoded',",
									"  body: {",
									"    mode: 'application/x-www-form-urlencoded',",
									"    raw: \"client_id=curl&grant_type=password&password=admin&scope=\\\"openid\\\",\\\"offline_access\\\",\\\"profile\\\",\\\"email\\\"&username=tdb-user\"",
									"  }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"    let jsonResponse = response.json(),",
									"        newAccessToken = jsonResponse.access_token;",
									"",
									"    console.log({ err, jsonResponse, newAccessToken })",
									"",
									"    pm.environment.set('intermediatedataToken', newAccessToken);",
									"    pm.variables.set('intermediatedataToken', newAccessToken);",
									"}); "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "38313211-c04d-4243-ae3b-7796d2e2b51d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "HistoricalData-Hive",
					"item": [
						{
							"name": "Subscribe The Topic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4cfbb21-6bb5-442e-ae82-bdfb8d84bc32",
										"exec": [
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,504]);\r",
											"});\r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present in response\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present in response\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"Length of json response data =\" +jsonData.length);\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->7.Verify the Response Size\r",
											"pm.test(\"Response size is less than 2MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
											"});\r",
											"\r",
											"//->8.Verify the Response  data \r",
											"var jsonData = pm.response.json(); \r",
											"/*\r",
											"pm.test(\"Response is not null\", function () { \r",
											"        pm.expect(jsonData).to.not.equal(null);\r",
											"    });\r",
											"\r",
											"pm.test(\"consumerId field is present in response\", function () { \r",
											"        pm.expect(jsonData.consumerId).is.to.equal(\"FlowAI\"); \r",
											"    });\r",
											"pm.test(\"category field is present in response\", function () { \r",
											"        pm.expect(jsonData.category).is.to.equal(\"TRAFFIC\"); \r",
											"    });\r",
											"    \r",
											"pm.test(\"Filter field is present in response\", function () { \r",
											"        pm.expect(jsonData.filters[0].type).is.to.equal(\"OBJECT_TYPE\");\r",
											"        pm.expect(jsonData.filters[1].type).is.to.equal(\"LOCODE\");\r",
											"    });\r",
											"    \r",
											"pm.test(\"dataEndpoint field is present in response\", function () { \r",
											"        pm.expect(jsonData.dataEndpoint.type).is.to.equal(\"REST\");\r",
											"    });  \r",
											"*/\r",
											"//->9.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData)\r",
											"\r",
											"//->10.json data parsing \r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"key\", jsonData.dataEndpoint.key);\r",
											"postman.setEnvironmentVariable(\"id\", jsonData.id);\r",
											"postman.setEnvironmentVariable(\"consumerId\", jsonData.consumerId);\r",
											"postman.setEnvironmentVariable(\"category\", jsonData.category);\r",
											"postman.setEnvironmentVariable(\"OBJECT_TYPE\", jsonData.filters[0].value);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\"\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										""
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Subscribe The Topic  with object id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6d46706-e866-41ad-a3c6-4caa0f66f7e2",
										"exec": [
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,504]);\r",
											"});\r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present in response\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present in response\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"Length of json response data =\" +jsonData.length);\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->7.Verify the Response Size\r",
											"pm.test(\"Response size is less than 2MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(2000000);\r",
											"});\r",
											"\r",
											"//->8.Verify the Response  data \r",
											"var jsonData = pm.response.json(); \r",
											"/*\r",
											"pm.test(\"Response is not null\", function () { \r",
											"        pm.expect(jsonData).to.not.equal(null);\r",
											"    });\r",
											"\r",
											"pm.test(\"consumerId field is present in response\", function () { \r",
											"        pm.expect(jsonData.consumerId).is.to.equal(\"FlowAI\"); \r",
											"    });\r",
											"pm.test(\"category field is present in response\", function () { \r",
											"        pm.expect(jsonData.category).is.to.equal(\"TRAFFIC\"); \r",
											"    });\r",
											"    \r",
											"pm.test(\"Filter field is present in response\", function () { \r",
											"        pm.expect(jsonData.filters[0].type).is.to.equal(\"OBJECT_TYPE\");\r",
											"        pm.expect(jsonData.filters[1].type).is.to.equal(\"LOCODE\");\r",
											"    });\r",
											"    \r",
											"pm.test(\"dataEndpoint field is present in response\", function () { \r",
											"        pm.expect(jsonData.dataEndpoint.type).is.to.equal(\"REST\");\r",
											"    });  \r",
											"*/\r",
											"//->9.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData)\r",
											"\r",
											"//->10.json data parsing \r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"key1\", jsonData.dataEndpoint.key);\r",
											"postman.setEnvironmentVariable(\"id\", jsonData.id);\r",
											"postman.setEnvironmentVariable(\"consumerId\", jsonData.consumerId);\r",
											"postman.setEnvironmentVariable(\"category\", jsonData.category);\r",
											"postman.setEnvironmentVariable(\"OBJECT_TYPE\", jsonData.filters[0].value);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"category\": \"{{category}}\",\n  \"filters\": [\n   {\n      \"type\": \"OBJECT_TYPE\",\n      \"value\": \"{{OBJECT_TYPE}}\",\n      \"subFilters\": [\n                {\n                    \"type\": \"ID\",\n                    \"value\": \"K420\"\n                }\n            ]\n    },\n    {\n      \"type\": \"LOCODE\",\n      \"value\": \"{{LOCODE}}\"\n    },\n    {\n      \"type\": \"FROM_TIME\",\n      \"value\": \"{{FROM_TIME}}\"\n    },\n    {\n      \"type\": \"TO_TIME\",\n      \"value\": \"{{TO_TIME}}\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										""
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Subscriptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "486e81e4-a0c2-4e47-b8db-abe2cc9077b1",
										"exec": [
											"",
											"//->1.Verify the status code in response body",
											"pm.test(\"Request was successful and Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											"",
											"//->2.Verify the Header is present or not ",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    ",
											"//->3.Verify the response should be successfull",
											"pm.test(\"response should be okay to process\", function () { ",
											"    pm.response.to.not.be.error; ",
											"    pm.response.to.not.have.jsonBody(\"error\"); ",
											"});",
											" ",
											"// ->4.Verify the response must be valid json body ",
											"pm.test(\"response must be valid and have a json body\", function () {",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"});",
											"",
											"//->5. Verify the Response headers ",
											"pass = true;",
											"fail = false;",
											"",
											"if (responseCode.code === 200 || responseCode.code === 201) {",
											"    tests[\"Request Succesfully Sent\"] = pass;",
											"",
											"    headers = {",
											"        \"Content-Type\": \"application/json\"",
											"    }",
											"",
											"    for (var i in headers) {",
											"        result = postman.getResponseHeader(i);",
											"        if (headers[i] === result)",
											"            tests[i + \" header value is present\"] = pass;",
											"        else",
											"            tests[i + \" header value is not present\"] = fail;",
											"",
											"    }",
											"    ",
											"}",
											"",
											"});",
											"",
											"//->6.print the json response ",
											"var jsonData = pm.response.json(); ",
											"console.log(jsonData);",
											"",
											"//->7.Verify the Response Time ",
											"pm.test(\"Response time is less than 30000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"//->7.Verify the Response Size",
											"pm.test(\"Response size is less than 2MB\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.below(2000000);",
											"});",
											"",
											"//->8.Verify the Response  data ",
											"var jsonData = pm.response.json(); ",
											"/*",
											"pm.test(\"Response is not null\", function () { ",
											"        pm.expect(jsonData).to.not.equal(null);",
											"    });",
											"",
											"pm.test(\"consumerId field is present in response\", function () { ",
											"        pm.expect(jsonData[0].consumerId).is.to.equal(\"FlowAI\"); ",
											"    });",
											"pm.test(\"category field is present in response\", function () { ",
											"        pm.expect(jsonData[0].category).is.to.equal(\"TRAFFIC\"); ",
											"    });",
											"    ",
											"pm.test(\"Filter field is present in response\", function () { ",
											"        pm.expect(jsonData[0].filters[0].type).is.to.equal(\"OBJECT_TYPE\");",
											"    });",
											"    ",
											"pm.test(\"dataEndpoint field is present in response\", function () { ",
											"        pm.expect(jsonData[0].dataEndpoint.type).is.to.equal(\"REST\");",
											"    });  ",
											"*/",
											"//->9.print the json response length",
											"var jsonData = pm.response.json(); ",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}",
											"description": "sGuard"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get One Subscription Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac2f9045-c8d8-4b37-bd8b-a2cb64fc61cf",
										"exec": [
											"",
											"//->1.Verify the status code in response body",
											"pm.test(\"Request was successful and Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"}); ",
											"",
											"//->2.Verify the Header is present or not ",
											"pm.test(\"Content-Type header is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    ",
											"//->3.Verify the response should be successfull",
											"pm.test(\"response should be okay to process\", function () { ",
											"    pm.response.to.not.be.error; ",
											"    pm.response.to.not.have.jsonBody(\"error\"); ",
											"});",
											" ",
											"// ->4.Verify the response must be valid json body ",
											"pm.test(\"response must be valid and have a json body\", function () {",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
											"     // assert that the response has a valid JSON body",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
											"});",
											"",
											"//->5. Verify the Response headers ",
											"pass = true;",
											"fail = false;",
											"",
											"if (responseCode.code === 200 || responseCode.code === 201) {",
											"    tests[\"Request Succesfully Sent\"] = pass;",
											"",
											"    headers = {",
											"        \"Content-Type\": \"application/json\"",
											"    }",
											"",
											"    for (var i in headers) {",
											"        result = postman.getResponseHeader(i);",
											"        if (headers[i] === result)",
											"            tests[i + \" header value is present\"] = pass;",
											"        else",
											"            tests[i + \" header value is not present\"] = fail;",
											"",
											"    }",
											"    ",
											"}",
											"",
											"});",
											"",
											"//->6.print the json response ",
											"var jsonData = pm.response.json(); ",
											"console.log(jsonData);",
											"",
											"//->7.Verify the Response Time ",
											"pm.test(\"Response time is less than 30000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);",
											"});",
											"//->7.Verify the Response Size",
											"pm.test(\"Response size is less than 15KB\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.below(15000);",
											"});",
											"",
											"//->8.Verify the Response  data ",
											"var jsonData = pm.response.json(); ",
											"pm.test(\"Response is not null\", function () { ",
											"        pm.expect(jsonData).to.not.equal(null);",
											"    });",
											"/*",
											"pm.test(\"consumerId field is present in response\", function () { ",
											"        pm.expect(jsonData.consumerId).is.to.equal(\"FlowAI\"); ",
											"    });",
											"pm.test(\"category field is present in response\", function () { ",
											"        pm.expect(jsonData.category).is.to.equal(\"TRAFFIC\"); ",
											"    });",
											"    ",
											"pm.test(\"Filter field is present in response\", function () { ",
											"        pm.expect(jsonData.filters[0].type).is.to.equal(\"OBJECT_TYPE\");",
											"    });",
											"    ",
											"pm.test(\"dataEndpoint field is present in response\", function () { ",
											"        pm.expect(jsonData.dataEndpoint.type).is.to.equal(\"REST\");",
											"    });  ",
											"    ",
											"*/",
											"//->9.print the json response length",
											"var jsonData = pm.response.json(); ",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										":id"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										},
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get records as per the category and Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ab51123-e8fe-48bd-85bf-e00d4d59dd47",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
											"});\r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 2MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(5000000);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/data/:consumerId/:category/:key",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"data",
										":consumerId",
										":category",
										":key"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										},
										{
											"key": "category",
											"value": "{{category}}"
										},
										{
											"key": "key",
											"value": "{{key}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get records as per the category and Key by size",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92483402-2b00-44cd-81db-5c7ab6408270",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
											"});\r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 2MB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(5000000);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/data/:consumerId/:category/:key?size=3000000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"data",
										":consumerId",
										":category",
										":key"
									],
									"query": [
										{
											"key": "size",
											"value": "3000000"
										}
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										},
										{
											"key": "category",
											"value": "{{category}}"
										},
										{
											"key": "key",
											"value": "{{key1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Subscription By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f920bd2-514e-4011-be16-e51565e0411a",
										"exec": [
											"\r",
											"//->1.Verify the status code in response body\r",
											"pm.test(\"Request was successful and Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); \r",
											"\r",
											"//->2.Verify the Header is present or not \r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"\r",
											"    \r",
											"//->3.Verify the response should be successfull\r",
											"pm.test(\"response should be okay to process\", function () { \r",
											"    pm.response.to.not.be.error; \r",
											"    pm.response.to.not.have.jsonBody(\"error\"); \r",
											"});\r",
											" \r",
											"// ->4.Verify the response must be valid json body \r",
											"pm.test(\"response must be valid and have a json body\", function () {\r",
											"     // assert that the status code is 200\r",
											"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
											"     // assert that the response has a valid JSON body\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"//->5. Verify the Response headers \r",
											"pass = true;\r",
											"fail = false;\r",
											"\r",
											"if (responseCode.code === 200 || responseCode.code === 201) {\r",
											"    tests[\"Request Succesfully Sent\"] = pass;\r",
											"\r",
											"    headers = {\r",
											"        \"Content-Type\": \"application/json\"\r",
											"    }\r",
											"\r",
											"    for (var i in headers) {\r",
											"        result = postman.getResponseHeader(i);\r",
											"        if (headers[i] === result)\r",
											"            tests[i + \" header value is present\"] = pass;\r",
											"        else\r",
											"            tests[i + \" header value is not present\"] = fail;\r",
											"\r",
											"    }\r",
											"    \r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											"//->6.print the json response \r",
											"var jsonData = pm.response.json(); \r",
											"console.log(jsonData);\r",
											"\r",
											"//->7.Verify the Response Time \r",
											"pm.test(\"Response time is less than 30000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"//->8.Verify the Response Size\r",
											"pm.test(\"Response size is less than 15KB\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.below(15000);\r",
											"});\r",
											"\r",
											"\r",
											"//->9.print the json response length\r",
											"var jsonData = pm.response.json(); \r",
											"console.log(\"The Length of Json Response =\"+ jsonData.length);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{url}}/v1/api/subscription/:consumerId/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"api",
										"subscription",
										":consumerId",
										":id"
									],
									"variable": [
										{
											"key": "consumerId",
											"value": "{{consumerid3}}"
										},
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "oauth2",
						"oauth2": [
							{
								"key": "accessToken",
								"value": "{{historicaldataToken}}",
								"type": "string"
							},
							{
								"key": "tokenType",
								"value": "bearer",
								"type": "string"
							},
							{
								"key": "addTokenTo",
								"value": "header",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b6b3a020-7146-4b59-98f0-cf2bc769fc09",
								"type": "text/javascript",
								"exec": [
									"const getTokenRequest = {",
									"  url: 'https://iam-synapses.iot.dev.its-siemens.com/auth/realms/its/protocol/openid-connect/token',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/x-www-form-urlencoded',",
									"  body: {",
									"    mode: 'application/x-www-form-urlencoded',",
									"    raw: \"client_id=curl&grant_type=password&password=admin&scope=\\\"openid\\\",\\\"offline_access\\\",\\\"profile\\\",\\\"email\\\"&username=tdb-user\"",
									"  }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, (err, response) => {",
									"    let jsonResponse = response.json(),",
									"        newAccessToken = jsonResponse.access_token;",
									"",
									"    console.log({ err, jsonResponse, newAccessToken })",
									"",
									"    pm.environment.set('historicaldataToken', newAccessToken);",
									"    pm.variables.set('historicaldataToken', newAccessToken);",
									"}); "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "86c40e97-3992-4a41-b7d8-d02c78b043bd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Folder for v1",
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ba56ff64-0127-4021-9fd2-9b86aa1b484b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b8193041-2883-4f44-94ea-bc725f35e309",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}